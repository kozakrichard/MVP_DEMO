import Tone from 'tone';
import React, { useEffect, useRef, useState, useContext } from 'react';
import PropTypes from 'prop-types';
import StartAudioContext from 'startaudiocontext';
import equal from 'fast-deep-equal';

// export default tone;

var SongContext = React.createContext();

var Song = function Song(_ref) {
  var _ref$isPlaying = _ref.isPlaying,
      isPlaying = _ref$isPlaying === undefined ? false : _ref$isPlaying,
      _ref$bpm = _ref.bpm,
      bpm = _ref$bpm === undefined ? 90 : _ref$bpm,
      _ref$swing = _ref.swing,
      swing = _ref$swing === undefined ? 0 : _ref$swing,
      _ref$swingSubdivision = _ref.swingSubdivision,
      swingSubdivision = _ref$swingSubdivision === undefined ? '8n' : _ref$swingSubdivision,
      _ref$volume = _ref.volume,
      volume = _ref$volume === undefined ? 0 : _ref$volume,
      _ref$isMuted = _ref.isMuted,
      isMuted = _ref$isMuted === undefined ? false : _ref$isMuted,
      children = _ref.children;

  useEffect(function () {
    Tone.Transport.bpm.value = bpm;
    Tone.Transport.swing = swing;
    Tone.Transport.swingSubdivision = swingSubdivision;
  }, [bpm, swing, swingSubdivision]);

  useEffect(function () {
    if (isPlaying) {
      // Hack to get Tone to NOT use same settings from another instance
      Tone.Transport.bpm.value = bpm;
      Tone.Transport.swing = swing;
      Tone.Transport.swingSubdivision = swingSubdivision;

      Tone.Transport.start();

      // iOS Web Audio API requires this library.
      StartAudioContext(Tone.context);
    } else {
      Tone.Transport.stop();
    }
  }, [isPlaying]);

  useEffect(function () {
    Tone.Master.volume.value = volume;
  }, [volume]);

  useEffect(function () {
    Tone.Master.mute = isMuted;
  }, [isMuted]);

  if (typeof window === 'undefined') {
    return null;
  }

  return React.createElement(
    SongContext.Provider,
    {
      value: {
        isPlaying: isPlaying
      }
    },
    children
  );
};

Song.propTypes = {
  isPlaying: PropTypes.bool,
  bpm: PropTypes.number,
  swing: PropTypes.number,
  swingSubdivision: PropTypes.oneOf(['8n']),
  children: PropTypes.node
};

var instruments = [{ id: 'amSynth', name: 'AM Synth', props: ['polyphony', 'oscillatorType'] }, { id: 'duoSynth', name: 'Duo Synth', props: ['polyphony', 'oscillatorType'] }, { id: 'fmSynth', name: 'FM Synth', props: ['polyphony', 'oscillatorType'] }, { id: 'membraneSynth', name: 'Membrane Synth', props: [] }, { id: 'metalSynth', name: 'Metal Synth', props: [] }, {
  id: 'monoSynth',
  name: 'Mono Synth',
  props: ['polyphony', 'oscillatorType']
},
// { id: 'noiseSynth', name: 'Noise Synth' }, // No sound, disabled for now
{ id: 'pluckSynth', name: 'Pluck Synth', props: [] }, { id: 'sampler', name: 'Sampler', props: ['samples'] }, { id: 'synth', name: 'Synth', props: ['polyphony', 'oscillatorType'] }];

var effects = [
// --------------------------------------------------------------------------
// Tone JS Effects
// --------------------------------------------------------------------------
{ id: 'autoFilter', name: 'Auto Filter' }, { id: 'autoPanner', name: 'Auto Panner' }, { id: 'autoWah', name: 'Auto Wah' }, { id: 'bitCrusher', name: 'Bit Crusher' },
// { id: 'chorus', name: 'Chorus' },
{ id: 'distortion', name: 'Distortion' }, { id: 'feedbackDelay', name: 'Feedback Delay' }, { id: 'freeverb', name: 'Freeverb' }, { id: 'panVol', name: 'Volume/Pan' },
// { id: 'reverb', name: 'Reverb' },
{ id: 'tremolo', name: 'Tremolo' },
// --------------------------------------------------------------------------
// Tone JS Components
// --------------------------------------------------------------------------
{ id: 'eq3', name: 'EQ3' }];

var config = {
  instruments: instruments,
  effects: effects
};

var NoteType = PropTypes.shape({
  name: PropTypes.string.isRequired,
  velocity: PropTypes.number
  // pitch: PropTypes.string,
  // octave: PropTypes.number,
  // accidental: PropTypes.string,
  // midi: PropTypes.number,
});

var StepNoteType = PropTypes.shape({
  name: PropTypes.oneOfType([NoteType, PropTypes.string]),
  duration: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  velocity: PropTypes.number
});

var StepType = PropTypes.oneOfType([StepNoteType, PropTypes.arrayOf(StepNoteType), PropTypes.arrayOf(PropTypes.string), PropTypes.string]);

var InstrumentTypes = PropTypes.oneOf(instruments.map(function (effect) {
  return effect.id;
}));

var EffectTypes = PropTypes.oneOf(effects.map(function (effect) {
  return effect.id;
}));

function buildSequencerStep(step, i) {
  if (typeof step === 'string') {
    return {
      notes: [{
        name: step
      }],
      index: i
    };
  } else if (step && step.note) {
    return {
      notes: [{
        name: step.name,
        duration: step.duration,
        velocity: step.velocity
      }],
      index: i
    };
  } else if (Array.isArray(step)) {
    return {
      notes: step.map(function (s) {
        if (typeof s === 'string') {
          return {
            name: s
          };
        }

        return s;
      }),
      index: i
    };
  }

  return {
    notes: [],
    index: i
  };
}

function usePrevious(value) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  var ref = useRef();

  // Store current value in ref
  useEffect(function () {
    ref.current = value;
  }, [value]); // Only re-run if value changes

  // Return previous value (happens before update in useEffect above)
  return ref.current;
}

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

var toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return Array.from(arr);
  }
};

var TrackContext = React.createContext();

var TrackConsumer = function TrackConsumer(_ref) {
  var isPlaying = _ref.isPlaying,
      _ref$steps = _ref.steps,
      steps = _ref$steps === undefined ? [] : _ref$steps,
      _ref$volume = _ref.volume,
      volume = _ref$volume === undefined ? 0 : _ref$volume,
      _ref$pan = _ref.pan,
      pan = _ref$pan === undefined ? 0 : _ref$pan,
      mute = _ref.mute,
      solo = _ref.solo,
      _ref$subdivision = _ref.subdivision,
      subdivision = _ref$subdivision === undefined ? '4n' : _ref$subdivision,
      _ref$effects = _ref.effects,
      effects = _ref$effects === undefined ? [] : _ref$effects,
      children = _ref.children,
      onStepPlay = _ref.onStepPlay;

  var _useState = useState([]),
      _useState2 = slicedToArray(_useState, 2),
      effectsChain = _useState2[0],
      setEffectsChain = _useState2[1];

  var _useState3 = useState([]),
      _useState4 = slicedToArray(_useState3, 2),
      instruments = _useState4[0],
      setInstruments = _useState4[1];

  var sequencer = useRef();
  var instrumentsRef = useRef(instruments);

  useEffect(function () {
    instrumentsRef.current = instruments;
  }, [instruments]);

  /*
  Tone.Sequence can't easily play chords. By default, arrays within steps are flattened out and subdivided. However an array of notes is our preferred way of representing chords. To get around this, buildSequencerStep() will transform notes and put them in a notes field as an array. We can then loop through and run triggerAttackRelease() to play the note/s.
  */
  var sequencerSteps = steps.map(buildSequencerStep);
  var prevSequencerSteps = usePrevious(sequencerSteps);

  useEffect(function () {
    // -------------------------------------------------------------------------
    // STEPS
    // -------------------------------------------------------------------------

    // Start/Stop sequencer!
    if (isPlaying) {
      sequencer.current = new Tone.Sequence(function (time, step) {
        step.notes.forEach(function (note) {
          instrumentsRef.current.map(function (instrument) {
            instrument.triggerAttackRelease(note.name, note.duration || 0.5, undefined, note.velocity);
          });
        });

        if (typeof onStepPlay === 'function') {
          onStepPlay(step.notes, step.index);
        }
      }, sequencerSteps, subdivision);

      sequencer.current.start(0);
    } else {
      if (sequencer.current) {
        sequencer.current.stop();
      }
    }
  }, [isPlaying]);

  useEffect(function () {
    if (sequencer.current) {
      sequencerSteps.forEach(function (step, i) {
        var isEqual = equal(steps.notes, prevSequencerSteps[i].notes);

        if (!isEqual) {
          sequencer.current.remove(i);
          sequencer.current.add(i, step);
        }
      });
    }
  }, [JSON.stringify(sequencerSteps)]);

  useEffect(function () {
    return function cleanup() {
      if (sequencer.current) {
        sequencer.current.dispose();
      }
    };
  }, []);

  var handleAddToEffectsChain = function handleAddToEffectsChain(effect) {
    // console.log('<Track />', 'onAddToEffectsChain');

    setEffectsChain(function (prevEffectsChain) {
      return [effect].concat(toConsumableArray(prevEffectsChain));
    });
  };

  var handleRemoveFromEffectsChain = function handleRemoveFromEffectsChain(effect) {
    // console.log('<Track />', 'onRemoveFromEffectsChain', effect);

    setEffectsChain(function (prevEffectsChain) {
      return prevEffectsChain.filter(function (e) {
        return e.id !== effect.id;
      });
    });
  };

  var handleInstrumentsUpdate = function handleInstrumentsUpdate(newInstruments) {
    setInstruments(newInstruments);
  };

  return React.createElement(
    TrackContext.Provider,
    {
      value: {
        effectsChain: effectsChain, // Used by Instrument
        onInstrumentsUpdate: handleInstrumentsUpdate,
        onAddToEffectsChain: handleAddToEffectsChain,
        onRemoveFromEffectsChain: handleRemoveFromEffectsChain,
        pan: pan,
        volume: volume,
        mute: mute,
        solo: solo
      }
    },
    children,
    effects
  );
};

TrackConsumer.propTypes = {
  // <Song /> props
  isPlaying: PropTypes.bool,
  // <Track /> props
  steps: PropTypes.arrayOf(StepType),
  volume: PropTypes.number,
  pan: PropTypes.number,
  mute: PropTypes.bool,
  solo: PropTypes.bool,
  subdivision: PropTypes.string, // react-music = resolution
  effects: PropTypes.oneOfType([PropTypes.node, PropTypes.arrayOf(PropTypes.element)]),
  onStepPlay: PropTypes.func
};

var Track = function Track(props) {
  var _React$useContext = React.useContext(SongContext),
      isPlaying = _React$useContext.isPlaying;

  if (typeof window === 'undefined') {
    return null;
  }

  return React.createElement(TrackConsumer, _extends({ isPlaying: isPlaying }, props));
};

var InstrumentConsumer = function InstrumentConsumer(_ref) {
  var _ref$type = _ref.type,
      type = _ref$type === undefined ? 'synth' : _ref$type,
      options = _ref.options,
      _ref$polyphony = _ref.polyphony,
      polyphony = _ref$polyphony === undefined ? 4 : _ref$polyphony,
      oscillator = _ref.oscillator,
      envelope = _ref.envelope,
      _ref$notes = _ref.notes,
      notes = _ref$notes === undefined ? [] : _ref$notes,
      samples = _ref.samples,
      onLoad = _ref.onLoad,
      volume = _ref.volume,
      pan = _ref.pan,
      mute = _ref.mute,
      solo = _ref.solo,
      effectsChain = _ref.effectsChain,
      onInstrumentsUpdate = _ref.onInstrumentsUpdate;

  var instrumentRef = useRef();
  // const trackChannelBase = useRef(new Tone.PanVol(pan, volume));
  var trackChannelBase = useRef(new Tone.Channel(volume, pan));
  var prevNotes = usePrevious(notes);

  // -------------------------------------------------------------------------
  // INSTRUMENT TYPE
  // -------------------------------------------------------------------------

  useEffect(function () {
    var _instrumentRef$curren;

    if (type === 'sampler') {
      instrumentRef.current = new Tone.Sampler(samples, onLoad);

      if (options && options.curve) {
        instrumentRef.current.curve = options.curve;
      }

      if (options && options.release) {
        instrumentRef.current.release = options.release;
      }
    } else if (type === 'membraneSynth') {
      instrumentRef.current = new Tone.MembraneSynth(buildSynthOptions({
        oscillator: oscillator,
        envelope: envelope
      }));
    } else if (type === 'metalSynth') {
      instrumentRef.current = new Tone.MetalSynth();
    } else if (type === 'noiseSynth') {
      instrumentRef.current = new Tone.NoiseSynth();
    } else if (type === 'pluckSynth') {
      instrumentRef.current = new Tone.PluckSynth();
    } else {
      var synth = void 0;

      if (type === 'amSynth') {
        synth = Tone.AMSynth;
      } else if (type === 'duoSynth') {
        synth = Tone.DuoSynth;
      } else if (type === 'fmSynth') {
        synth = Tone.FMSynth;
      } else if (type === 'monoSynth') {
        synth = Tone.MonoSynth;
      } else if (type === 'synth') {
        synth = Tone.Synth;
      } else {
        synth = Tone.Synth;
      }

      /**
       * PolySynth accepts other Synth types as second param, making them
       * polyphonic. As this is a common use case, all Synths will be created
       * via PolySynth. Monophonic synths can easily be created by setting the
       * `polyphony` prop to 1.
       */
      instrumentRef.current = new Tone.PolySynth(polyphony, synth, buildSynthOptions({
        oscillator: oscillator,
        envelope: envelope
      }));
    }

    (_instrumentRef$curren = instrumentRef.current).chain.apply(_instrumentRef$curren, toConsumableArray(effectsChain).concat([trackChannelBase.current, Tone.Master]));

    // Add this Instrument to Track Context
    onInstrumentsUpdate([instrumentRef.current]);

    return function cleanup() {
      if (instrumentRef.current) {
        instrumentRef.current.dispose();
      }
    };
  }, [type, polyphony]);

  useEffect(function () {
    if (
    // TODO: Add other synth types
    type === 'synth' && instrumentRef && instrumentRef.current && oscillator) {
      instrumentRef.current.set('oscillator', oscillator);
      // console.log(oscillator);
    }
  }, [oscillator, type]);

  // -------------------------------------------------------------------------
  // VOLUME / PAN
  // -------------------------------------------------------------------------

  useEffect(function () {
    trackChannelBase.current.volume.value = volume;
  }, [volume]);

  useEffect(function () {
    trackChannelBase.current.pan.value = pan;
  }, [pan]);

  useEffect(function () {
    trackChannelBase.current.mute = mute;
  }, [mute]);

  useEffect(function () {
    trackChannelBase.current.solo = solo;
  }, [solo]);

  // -------------------------------------------------------------------------
  // NOTES
  // -------------------------------------------------------------------------

  /**
   NOTE: Would prefer to use useLayoutEffect as it is a little faster, but unable to test it right now
   **/
  useEffect(function () {
    // Loop through all current notes
    notes && notes.forEach(function (note) {
      // Check if note is playing
      // const isPlaying =
      //   prevNotes && prevNotes.filter((n) => n.name === note.name).length > 0;

      // Only play note is it isn't already playing
      // if (!isPlaying) {

      if (note.duration) {
        instrumentRef.current.triggerAttackRelease(note.name, note.duration, undefined, note.velocity);
      } else {
        instrumentRef.current.triggerAttack(note.name, undefined, note.velocity);
      }
      // }
    });

    // Loop through all previous notes
    prevNotes && prevNotes.forEach(function (note) {
      // Check if note is still playing
      var isPlaying = notes && notes.filter(function (n) {
        return n.name === note.name;
      }).length > 0;

      if (!isPlaying) {
        instrumentRef.current.triggerRelease(note.name);
      }
    });
  }, [notes, prevNotes]);

  // -------------------------------------------------------------------------
  // EFFECTS CHAIN
  // -------------------------------------------------------------------------

  useEffect(function () {
    var _instrumentRef$curren2;

    // console.log('<Instrument />', 'updateEffectsChain', effectsChain);

    // NOTE: Using trackChannelBase causes effects to not turn off
    instrumentRef.current.disconnect();
    (_instrumentRef$curren2 = instrumentRef.current).chain.apply(_instrumentRef$curren2, toConsumableArray(effectsChain).concat([trackChannelBase.current, Tone.Master]));
  }, [effectsChain]);

  return null;
};

InstrumentConsumer.propTypes = {
  // <Instrument /> Props
  type: InstrumentTypes.isRequired,
  options: PropTypes.object,
  notes: PropTypes.arrayOf(NoteType), // Currently played notes.
  polyphony: PropTypes.number,
  oscillatorType: PropTypes.oneOf(['triangle', 'sine', 'square']),
  envelopeAttack: PropTypes.number,
  envelopeDecay: PropTypes.number,
  envelopeSustain: PropTypes.number,
  envelopeRelease: PropTypes.number,
  samples: PropTypes.object,
  trackChannel: PropTypes.object, // An instance of new this.Tone.PanVol()
  // <Track /> Props
  volume: PropTypes.number,
  pan: PropTypes.number,
  mute: PropTypes.bool,
  solo: PropTypes.bool,
  effectsChain: PropTypes.array,
  onInstrumentsUpdate: PropTypes.func
};

var Instrument = function Instrument(props) {
  var _useContext = useContext(TrackContext),
      volume = _useContext.volume,
      pan = _useContext.pan,
      mute = _useContext.mute,
      solo = _useContext.solo,
      effectsChain = _useContext.effectsChain,
      onInstrumentsUpdate = _useContext.onInstrumentsUpdate;

  if (typeof window === 'undefined') {
    return null;
  }

  return React.createElement(InstrumentConsumer, _extends({
    volume: volume,
    pan: pan,
    mute: mute,
    solo: solo,
    effectsChain: effectsChain,
    onInstrumentsUpdate: onInstrumentsUpdate
  }, props));
};

/**
 * Use Instrument's flattened synth props to create options object for Tone JS
 */
var buildSynthOptions = function buildSynthOptions(_ref2) {
  var oscillator = _ref2.oscillator,
      envelope = _ref2.envelope;

  if (oscillator || envelope) {
    return _extends({}, envelope ? { envelope: envelope } : {}, oscillator ? { oscillator: oscillator } : {});
  }

  return undefined;
};

var EffectConsumer = function EffectConsumer(_ref) {
  var type = _ref.type,
      id = _ref.id,
      _ref$delayTime = _ref.delayTime,
      delayTime = _ref$delayTime === undefined ? '8n' : _ref$delayTime,
      _ref$feedback = _ref.feedback,
      feedback = _ref$feedback === undefined ? 0.5 : _ref$feedback,
      _ref$wet = _ref.wet,
      wet = _ref$wet === undefined ? 1 : _ref$wet,
      low = _ref.low,
      mid = _ref.mid,
      high = _ref.high,
      lowFrequency = _ref.lowFrequency,
      highFrequency = _ref.highFrequency,
      onAddToEffectsChain = _ref.onAddToEffectsChain,
      onRemoveFromEffectsChain = _ref.onRemoveFromEffectsChain;

  var effect = useRef();

  useEffect(function () {
    // console.log('<Effect /> mount');
    // console.log(`id: ${id}`);

    if (type === 'autoFilter') {
      effect.current = new Tone.AutoFilter();
    } else if (type === 'autoPanner') {
      effect.current = new Tone.AutoPanner();
    } else if (type === 'autoWah') {
      effect.current = new Tone.AutoWah();
    } else if (type === 'bitCrusher') {
      effect.current = new Tone.BitCrusher();
      // Removed for now because delayTime has to be in ms
      // } else if (type === 'chorus') {
      //   effect.current = new Tone.Chorus();
    } else if (type === 'distortion') {
      effect.current = new Tone.Distortion(0.5);
    } else if (type === 'feedbackDelay') {
      effect.current = new Tone.FeedbackDelay(delayTime, feedback);
    } else if (type === 'freeverb') {
      effect.current = new Tone.Freeverb();
    } else if (type === 'panVol') {
      effect.current = new Tone.PanVol();
      // Needs generate()
      // } else if (type === 'reverb') {
      //   effect.current = new Tone.Reverb();
    } else if (type === 'tremolo') {
      effect.current = new Tone.Tremolo();
    } else if (type === 'eq3') {
      effect.current = new Tone.EQ3(low, mid, high);
    }

    if (effect.current) {
      effect.current.id = id;

      // Update effects chain
      // TODO: Work out which index to insert current this.effect
      onAddToEffectsChain(effect.current);
    }

    return function () {
      // console.log('<Effect /> unmount');
      onRemoveFromEffectsChain(effect.current);
    };
  }, [type]);

  useEffect(function () {
    if (effect.current && effect.current.feedback) {
      effect.current.feedback.value = feedback;
    }
  }, [feedback]);

  useEffect(function () {
    if (effect.current && effect.current.delayTime) {
      effect.current.delayTime.value = delayTime;
    }
  }, [delayTime]);

  useEffect(function () {
    if (effect.current && effect.current.wet) {
      effect.current.wet.value = wet;
    }
  }, [wet]);

  useEffect(function () {
    if (typeof low !== 'undefined' && effect.current && effect.current.low) {
      effect.current.low.value = low;
    }
  }, [low]);

  useEffect(function () {
    if (typeof mid !== 'undefined' && effect.current && effect.current.mid) {
      effect.current.mid.value = mid;
    }
  }, [mid]);

  useEffect(function () {
    if (typeof high !== 'undefined' && effect.current && effect.current.high) {
      effect.current.high.value = high;
    }
  }, [high]);

  useEffect(function () {
    if (typeof lowFrequency !== 'undefined' && effect.current && effect.current.lowFrequency) {
      effect.current.lowFrequency.value = lowFrequency;
    }
  }, [lowFrequency]);

  useEffect(function () {
    if (typeof highFrequency !== 'undefined' && effect.current && effect.current.highFrequency) {
      effect.current.highFrequency.value = highFrequency;
    }
  }, [highFrequency]);

  return null;
};

EffectConsumer.propTypes = {
  type: EffectTypes.isRequired,
  id: PropTypes.oneOfType([PropTypes.string.isRequired, PropTypes.number.isRequired]),
  delayTime: PropTypes.string,
  feedback: PropTypes.number,
  wet: PropTypes.number,
  low: PropTypes.number,
  mid: PropTypes.number,
  high: PropTypes.number,
  lowFrequency: PropTypes.number,
  highFrequency: PropTypes.number,
  // <Track /> Props
  onAddToEffectsChain: PropTypes.func,
  onRemoveFromEffectsChain: PropTypes.func
};

var Effect = function Effect(props) {
  var _useContext = useContext(TrackContext),
      onAddToEffectsChain = _useContext.onAddToEffectsChain,
      onRemoveFromEffectsChain = _useContext.onRemoveFromEffectsChain;

  return React.createElement(EffectConsumer, _extends({
    onAddToEffectsChain: onAddToEffectsChain,
    onRemoveFromEffectsChain: onRemoveFromEffectsChain
  }, props));
};

export { Song, Track, Instrument, Effect, config };
//# sourceMappingURL=index.es.js.map
