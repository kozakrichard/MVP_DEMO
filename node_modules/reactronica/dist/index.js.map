{"version":3,"file":"index.js","sources":["../src/lib/tone.js","../src/components/Song.js","../src/config/index.js","../src/types/propTypes.js","../src/lib/buildSequencerStep.js","../src/lib/hooks/index.js","../src/components/Track.js","../src/components/Instrument.js","../src/components/Effect.js"],"sourcesContent":["import Tone from 'tone';\n\n// let tone;\n\n// if (typeof window !== 'undefined') {\n//   tone = require('Tone');\n// } else {\n//   tone = null;\n// }\n\nexport default Tone;\n// export default tone;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport StartAudioContext from 'startaudiocontext';\n\nimport Tone from '../lib/tone';\n\nexport const SongContext = React.createContext();\n\nconst Song = ({\n  isPlaying = false,\n  bpm = 90,\n  // subdivision= '4n',\n  swing = 0,\n  swingSubdivision = '8n',\n  volume = 0,\n  isMuted = false,\n  children,\n}) => {\n  useEffect(() => {\n    Tone.Transport.bpm.value = bpm;\n    Tone.Transport.swing = swing;\n    Tone.Transport.swingSubdivision = swingSubdivision;\n  }, [bpm, swing, swingSubdivision]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      // Hack to get Tone to NOT use same settings from another instance\n      Tone.Transport.bpm.value = bpm;\n      Tone.Transport.swing = swing;\n      Tone.Transport.swingSubdivision = swingSubdivision;\n\n      Tone.Transport.start();\n\n      // iOS Web Audio API requires this library.\n      StartAudioContext(Tone.context);\n    } else {\n      Tone.Transport.stop();\n    }\n  }, [isPlaying]);\n\n  useEffect(() => {\n    Tone.Master.volume.value = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    Tone.Master.mute = isMuted;\n  }, [isMuted]);\n\n  if (typeof window === 'undefined') {\n    return null;\n  }\n\n  return (\n    <SongContext.Provider\n      value={{\n        isPlaying,\n      }}\n    >\n      {children}\n    </SongContext.Provider>\n  );\n};\n\nSong.propTypes = {\n  isPlaying: PropTypes.bool,\n  bpm: PropTypes.number,\n  swing: PropTypes.number,\n  swingSubdivision: PropTypes.oneOf(['8n']),\n  children: PropTypes.node,\n};\n\nexport default Song;\n","export const instruments = [\n  { id: 'amSynth', name: 'AM Synth', props: ['polyphony', 'oscillatorType'] },\n  { id: 'duoSynth', name: 'Duo Synth', props: ['polyphony', 'oscillatorType'] },\n  { id: 'fmSynth', name: 'FM Synth', props: ['polyphony', 'oscillatorType'] },\n  { id: 'membraneSynth', name: 'Membrane Synth', props: [] },\n  { id: 'metalSynth', name: 'Metal Synth', props: [] },\n  {\n    id: 'monoSynth',\n    name: 'Mono Synth',\n    props: ['polyphony', 'oscillatorType'],\n  },\n  // { id: 'noiseSynth', name: 'Noise Synth' }, // No sound, disabled for now\n  { id: 'pluckSynth', name: 'Pluck Synth', props: [] },\n  { id: 'sampler', name: 'Sampler', props: ['samples'] },\n  { id: 'synth', name: 'Synth', props: ['polyphony', 'oscillatorType'] },\n];\n\nexport const effects = [\n  // --------------------------------------------------------------------------\n  // Tone JS Effects\n  // --------------------------------------------------------------------------\n  { id: 'autoFilter', name: 'Auto Filter' },\n  { id: 'autoPanner', name: 'Auto Panner' },\n  { id: 'autoWah', name: 'Auto Wah' },\n  { id: 'bitCrusher', name: 'Bit Crusher' },\n  // { id: 'chorus', name: 'Chorus' },\n  { id: 'distortion', name: 'Distortion' },\n  { id: 'feedbackDelay', name: 'Feedback Delay' },\n  { id: 'freeverb', name: 'Freeverb' },\n  { id: 'panVol', name: 'Volume/Pan' },\n  // { id: 'reverb', name: 'Reverb' },\n  { id: 'tremolo', name: 'Tremolo' },\n  // --------------------------------------------------------------------------\n  // Tone JS Components\n  // --------------------------------------------------------------------------\n  { id: 'eq3', name: 'EQ3' },\n];\n\nconst config = {\n  instruments,\n  effects,\n};\n\nexport default config;\n","import PropTypes from 'prop-types';\nimport { instruments, effects } from '../config';\n\nexport const NoteType = PropTypes.shape({\n  name: PropTypes.string.isRequired,\n  velocity: PropTypes.number,\n  // pitch: PropTypes.string,\n  // octave: PropTypes.number,\n  // accidental: PropTypes.string,\n  // midi: PropTypes.number,\n});\n\nexport const StepNoteType = PropTypes.shape({\n  name: PropTypes.oneOfType([NoteType, PropTypes.string]),\n  duration: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  velocity: PropTypes.number,\n});\n\nexport const StepType = PropTypes.oneOfType([\n  StepNoteType,\n  PropTypes.arrayOf(StepNoteType),\n  PropTypes.arrayOf(PropTypes.string),\n  PropTypes.string,\n]);\n\nexport const InstrumentTypes = PropTypes.oneOf(\n  instruments.map((effect) => effect.id),\n);\n\nexport const EffectTypes = PropTypes.oneOf(effects.map((effect) => effect.id));\n","export default function buildSequencerStep(step, i) {\n  if (typeof step === 'string') {\n    return {\n      notes: [\n        {\n          name: step,\n        },\n      ],\n      index: i,\n    };\n  } else if (step && step.note) {\n    return {\n      notes: [\n        {\n          name: step.name,\n          duration: step.duration,\n          velocity: step.velocity,\n        },\n      ],\n      index: i,\n    };\n  } else if (Array.isArray(step)) {\n    return {\n      notes: step.map((s) => {\n        if (typeof s === 'string') {\n          return {\n            name: s,\n          };\n        }\n\n        return s;\n      }),\n      index: i,\n    };\n  }\n\n  return {\n    notes: [],\n    index: i,\n  };\n}\n","import { useRef, useEffect } from 'react';\n\nexport function usePrevious(value) {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = useRef();\n\n  // Store current value in ref\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n\n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n}\n","import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport equal from 'fast-deep-equal';\n\nimport { SongContext } from './Song';\nimport { StepType } from '../types/propTypes';\nimport Tone from '../lib/tone';\nimport buildSequencerStep from '../lib/buildSequencerStep';\nimport { usePrevious } from '../lib/hooks';\n\nexport const TrackContext = React.createContext();\n\nconst TrackConsumer = ({\n  // <Song /> props\n  isPlaying,\n  // <Track /> props\n  steps = [],\n  volume = 0,\n  pan = 0,\n  mute,\n  solo,\n  subdivision = '4n',\n  effects = [],\n  children,\n  onStepPlay,\n}) => {\n  const [effectsChain, setEffectsChain] = useState([]);\n  const [instruments, setInstruments] = useState([]);\n  const sequencer = useRef();\n  const instrumentsRef = useRef(instruments);\n\n  useEffect(() => {\n    instrumentsRef.current = instruments;\n  }, [instruments]);\n\n  /*\n  Tone.Sequence can't easily play chords. By default, arrays within steps are flattened out and subdivided. However an array of notes is our preferred way of representing chords. To get around this, buildSequencerStep() will transform notes and put them in a notes field as an array. We can then loop through and run triggerAttackRelease() to play the note/s.\n  */\n  const sequencerSteps = steps.map(buildSequencerStep);\n  const prevSequencerSteps = usePrevious(sequencerSteps);\n\n  useEffect(() => {\n    // -------------------------------------------------------------------------\n    // STEPS\n    // -------------------------------------------------------------------------\n\n    // Start/Stop sequencer!\n    if (isPlaying) {\n      sequencer.current = new Tone.Sequence(\n        (time, step) => {\n          step.notes.forEach((note) => {\n            instrumentsRef.current.map((instrument) => {\n              instrument.triggerAttackRelease(\n                note.name,\n                note.duration || 0.5,\n                undefined,\n                note.velocity,\n              );\n            });\n          });\n\n          if (typeof onStepPlay === 'function') {\n            onStepPlay(step.notes, step.index);\n          }\n        },\n        sequencerSteps,\n        subdivision,\n      );\n\n      sequencer.current.start(0);\n    } else {\n      if (sequencer.current) {\n        sequencer.current.stop();\n      }\n    }\n  }, [isPlaying]);\n\n  useEffect(() => {\n    if (sequencer.current) {\n      sequencerSteps.forEach((step, i) => {\n        const isEqual = equal(steps.notes, prevSequencerSteps[i].notes);\n\n        if (!isEqual) {\n          sequencer.current.remove(i);\n          sequencer.current.add(i, step);\n        }\n      });\n    }\n  }, [JSON.stringify(sequencerSteps)]);\n\n  useEffect(() => {\n    return function cleanup() {\n      if (sequencer.current) {\n        sequencer.current.dispose();\n      }\n    };\n  }, []);\n\n  const handleAddToEffectsChain = (effect) => {\n    // console.log('<Track />', 'onAddToEffectsChain');\n\n    setEffectsChain((prevEffectsChain) => {\n      return [effect, ...prevEffectsChain];\n    });\n  };\n\n  const handleRemoveFromEffectsChain = (effect) => {\n    // console.log('<Track />', 'onRemoveFromEffectsChain', effect);\n\n    setEffectsChain((prevEffectsChain) => {\n      return prevEffectsChain.filter((e) => e.id !== effect.id);\n    });\n  };\n\n  const handleInstrumentsUpdate = (newInstruments) => {\n    setInstruments(newInstruments);\n  };\n\n  return (\n    <TrackContext.Provider\n      value={{\n        effectsChain, // Used by Instrument\n        onInstrumentsUpdate: handleInstrumentsUpdate,\n        onAddToEffectsChain: handleAddToEffectsChain,\n        onRemoveFromEffectsChain: handleRemoveFromEffectsChain,\n        pan,\n        volume,\n        mute,\n        solo,\n      }}\n    >\n      {children}\n      {effects}\n    </TrackContext.Provider>\n  );\n};\n\nTrackConsumer.propTypes = {\n  // <Song /> props\n  isPlaying: PropTypes.bool,\n  // <Track /> props\n  steps: PropTypes.arrayOf(StepType),\n  volume: PropTypes.number,\n  pan: PropTypes.number,\n  mute: PropTypes.bool,\n  solo: PropTypes.bool,\n  subdivision: PropTypes.string, // react-music = resolution\n  effects: PropTypes.oneOfType([\n    PropTypes.node,\n    PropTypes.arrayOf(PropTypes.element),\n  ]),\n  onStepPlay: PropTypes.func,\n};\n\nconst Track = (props) => {\n  const { isPlaying } = React.useContext(SongContext);\n\n  if (typeof window === 'undefined') {\n    return null;\n  }\n\n  return <TrackConsumer isPlaying={isPlaying} {...props} />;\n};\n\nexport default Track;\n","import React, {\n  useEffect,\n  useRef,\n  useContext,\n  // useLayoutEffect\n} from 'react';\nimport PropTypes from 'prop-types';\n\n// import { SongContext } from './Song';\nimport { TrackContext } from './Track';\nimport { NoteType, InstrumentTypes } from '../types/propTypes';\nimport Tone from '../lib/tone';\nimport { usePrevious } from '../lib/hooks';\n\nconst InstrumentConsumer = ({\n  // <Instrument /> Props\n  type = 'synth',\n  options,\n  polyphony = 4,\n  oscillator,\n  envelope,\n  notes = [],\n  samples,\n  onLoad,\n  // <Track /> Props\n  volume,\n  pan,\n  mute,\n  solo,\n  effectsChain,\n  onInstrumentsUpdate,\n}) => {\n  const instrumentRef = useRef();\n  // const trackChannelBase = useRef(new Tone.PanVol(pan, volume));\n  const trackChannelBase = useRef(new Tone.Channel(volume, pan));\n  const prevNotes = usePrevious(notes);\n\n  // -------------------------------------------------------------------------\n  // INSTRUMENT TYPE\n  // -------------------------------------------------------------------------\n\n  useEffect(() => {\n    if (type === 'sampler') {\n      instrumentRef.current = new Tone.Sampler(samples, onLoad);\n\n      if (options && options.curve) {\n        instrumentRef.current.curve = options.curve;\n      }\n\n      if (options && options.release) {\n        instrumentRef.current.release = options.release;\n      }\n    } else if (type === 'membraneSynth') {\n      instrumentRef.current = new Tone.MembraneSynth(\n        buildSynthOptions({\n          oscillator,\n          envelope,\n        }),\n      );\n    } else if (type === 'metalSynth') {\n      instrumentRef.current = new Tone.MetalSynth();\n    } else if (type === 'noiseSynth') {\n      instrumentRef.current = new Tone.NoiseSynth();\n    } else if (type === 'pluckSynth') {\n      instrumentRef.current = new Tone.PluckSynth();\n    } else {\n      let synth;\n\n      if (type === 'amSynth') {\n        synth = Tone.AMSynth;\n      } else if (type === 'duoSynth') {\n        synth = Tone.DuoSynth;\n      } else if (type === 'fmSynth') {\n        synth = Tone.FMSynth;\n      } else if (type === 'monoSynth') {\n        synth = Tone.MonoSynth;\n      } else if (type === 'synth') {\n        synth = Tone.Synth;\n      } else {\n        synth = Tone.Synth;\n      }\n\n      /**\n       * PolySynth accepts other Synth types as second param, making them\n       * polyphonic. As this is a common use case, all Synths will be created\n       * via PolySynth. Monophonic synths can easily be created by setting the\n       * `polyphony` prop to 1.\n       */\n      instrumentRef.current = new Tone.PolySynth(\n        polyphony,\n        synth,\n        buildSynthOptions({\n          oscillator,\n          envelope,\n        }),\n      );\n    }\n\n    instrumentRef.current.chain(\n      ...effectsChain,\n      trackChannelBase.current,\n      Tone.Master,\n    );\n\n    // Add this Instrument to Track Context\n    onInstrumentsUpdate([instrumentRef.current]);\n\n    return function cleanup() {\n      if (instrumentRef.current) {\n        instrumentRef.current.dispose();\n      }\n    };\n  }, [type, polyphony]);\n\n  useEffect(() => {\n    if (\n      // TODO: Add other synth types\n      type === 'synth' &&\n      instrumentRef &&\n      instrumentRef.current &&\n      oscillator\n    ) {\n      instrumentRef.current.set('oscillator', oscillator);\n      // console.log(oscillator);\n    }\n  }, [oscillator, type]);\n\n  // -------------------------------------------------------------------------\n  // VOLUME / PAN\n  // -------------------------------------------------------------------------\n\n  useEffect(() => {\n    trackChannelBase.current.volume.value = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    trackChannelBase.current.pan.value = pan;\n  }, [pan]);\n\n  useEffect(() => {\n    trackChannelBase.current.mute = mute;\n  }, [mute]);\n\n  useEffect(() => {\n    trackChannelBase.current.solo = solo;\n  }, [solo]);\n\n  // -------------------------------------------------------------------------\n  // NOTES\n  // -------------------------------------------------------------------------\n\n  /**\n   NOTE: Would prefer to use useLayoutEffect as it is a little faster, but unable to test it right now\n   **/\n  useEffect(() => {\n    // Loop through all current notes\n    notes &&\n      notes.forEach((note) => {\n        // Check if note is playing\n        // const isPlaying =\n        //   prevNotes && prevNotes.filter((n) => n.name === note.name).length > 0;\n\n        // Only play note is it isn't already playing\n        // if (!isPlaying) {\n\n        if (note.duration) {\n          instrumentRef.current.triggerAttackRelease(\n            note.name,\n            note.duration,\n            undefined,\n            note.velocity,\n          );\n        } else {\n          instrumentRef.current.triggerAttack(\n            note.name,\n            undefined,\n            note.velocity,\n          );\n        }\n        // }\n      });\n\n    // Loop through all previous notes\n    prevNotes &&\n      prevNotes.forEach((note) => {\n        // Check if note is still playing\n        const isPlaying =\n          notes && notes.filter((n) => n.name === note.name).length > 0;\n\n        if (!isPlaying) {\n          instrumentRef.current.triggerRelease(note.name);\n        }\n      });\n  }, [notes, prevNotes]);\n\n  // -------------------------------------------------------------------------\n  // EFFECTS CHAIN\n  // -------------------------------------------------------------------------\n\n  useEffect(() => {\n    // console.log('<Instrument />', 'updateEffectsChain', effectsChain);\n\n    // NOTE: Using trackChannelBase causes effects to not turn off\n    instrumentRef.current.disconnect();\n    instrumentRef.current.chain(\n      ...effectsChain,\n      trackChannelBase.current,\n      Tone.Master,\n    );\n  }, [effectsChain]);\n\n  return null;\n};\n\nInstrumentConsumer.propTypes = {\n  // <Instrument /> Props\n  type: InstrumentTypes.isRequired,\n  options: PropTypes.object,\n  notes: PropTypes.arrayOf(NoteType), // Currently played notes.\n  polyphony: PropTypes.number,\n  oscillatorType: PropTypes.oneOf(['triangle', 'sine', 'square']),\n  envelopeAttack: PropTypes.number,\n  envelopeDecay: PropTypes.number,\n  envelopeSustain: PropTypes.number,\n  envelopeRelease: PropTypes.number,\n  samples: PropTypes.object,\n  trackChannel: PropTypes.object, // An instance of new this.Tone.PanVol()\n  // <Track /> Props\n  volume: PropTypes.number,\n  pan: PropTypes.number,\n  mute: PropTypes.bool,\n  solo: PropTypes.bool,\n  effectsChain: PropTypes.array,\n  onInstrumentsUpdate: PropTypes.func,\n};\n\nconst Instrument = (props) => {\n  const {\n    volume,\n    pan,\n    mute,\n    solo,\n    effectsChain,\n    onInstrumentsUpdate,\n  } = useContext(TrackContext);\n\n  if (typeof window === 'undefined') {\n    return null;\n  }\n\n  return (\n    <InstrumentConsumer\n      volume={volume}\n      pan={pan}\n      mute={mute}\n      solo={solo}\n      effectsChain={effectsChain}\n      onInstrumentsUpdate={onInstrumentsUpdate}\n      {...props}\n    />\n  );\n};\n\n/**\n * Use Instrument's flattened synth props to create options object for Tone JS\n */\nconst buildSynthOptions = ({ oscillator, envelope }) => {\n  if (oscillator || envelope) {\n    return {\n      ...(envelope ? { envelope } : {}),\n      ...(oscillator ? { oscillator } : {}),\n    };\n  }\n\n  return undefined;\n};\n\nexport default Instrument;\n","import React, { useEffect, useContext, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { TrackContext } from './Track';\nimport Tone from '../lib/tone';\nimport { EffectTypes } from '../types/propTypes';\n\nconst EffectConsumer = ({\n  type,\n  id,\n  delayTime = '8n',\n  feedback = 0.5,\n  wet = 1,\n  low,\n  mid,\n  high,\n  lowFrequency,\n  highFrequency,\n  onAddToEffectsChain,\n  onRemoveFromEffectsChain,\n}) => {\n  const effect = useRef();\n\n  useEffect(() => {\n    // console.log('<Effect /> mount');\n    // console.log(`id: ${id}`);\n\n    if (type === 'autoFilter') {\n      effect.current = new Tone.AutoFilter();\n    } else if (type === 'autoPanner') {\n      effect.current = new Tone.AutoPanner();\n    } else if (type === 'autoWah') {\n      effect.current = new Tone.AutoWah();\n    } else if (type === 'bitCrusher') {\n      effect.current = new Tone.BitCrusher();\n      // Removed for now because delayTime has to be in ms\n      // } else if (type === 'chorus') {\n      //   effect.current = new Tone.Chorus();\n    } else if (type === 'distortion') {\n      effect.current = new Tone.Distortion(0.5);\n    } else if (type === 'feedbackDelay') {\n      effect.current = new Tone.FeedbackDelay(delayTime, feedback);\n    } else if (type === 'freeverb') {\n      effect.current = new Tone.Freeverb();\n    } else if (type === 'panVol') {\n      effect.current = new Tone.PanVol();\n      // Needs generate()\n      // } else if (type === 'reverb') {\n      //   effect.current = new Tone.Reverb();\n    } else if (type === 'tremolo') {\n      effect.current = new Tone.Tremolo();\n    } else if (type === 'eq3') {\n      effect.current = new Tone.EQ3(low, mid, high);\n    }\n\n    if (effect.current) {\n      effect.current.id = id;\n\n      // Update effects chain\n      // TODO: Work out which index to insert current this.effect\n      onAddToEffectsChain(effect.current);\n    }\n\n    return () => {\n      // console.log('<Effect /> unmount');\n      onRemoveFromEffectsChain(effect.current);\n    };\n  }, [type]);\n\n  useEffect(() => {\n    if (effect.current && effect.current.feedback) {\n      effect.current.feedback.value = feedback;\n    }\n  }, [feedback]);\n\n  useEffect(() => {\n    if (effect.current && effect.current.delayTime) {\n      effect.current.delayTime.value = delayTime;\n    }\n  }, [delayTime]);\n\n  useEffect(() => {\n    if (effect.current && effect.current.wet) {\n      effect.current.wet.value = wet;\n    }\n  }, [wet]);\n\n  useEffect(() => {\n    if (typeof low !== 'undefined' && effect.current && effect.current.low) {\n      effect.current.low.value = low;\n    }\n  }, [low]);\n\n  useEffect(() => {\n    if (typeof mid !== 'undefined' && effect.current && effect.current.mid) {\n      effect.current.mid.value = mid;\n    }\n  }, [mid]);\n\n  useEffect(() => {\n    if (typeof high !== 'undefined' && effect.current && effect.current.high) {\n      effect.current.high.value = high;\n    }\n  }, [high]);\n\n  useEffect(() => {\n    if (\n      typeof lowFrequency !== 'undefined' &&\n      effect.current &&\n      effect.current.lowFrequency\n    ) {\n      effect.current.lowFrequency.value = lowFrequency;\n    }\n  }, [lowFrequency]);\n\n  useEffect(() => {\n    if (\n      typeof highFrequency !== 'undefined' &&\n      effect.current &&\n      effect.current.highFrequency\n    ) {\n      effect.current.highFrequency.value = highFrequency;\n    }\n  }, [highFrequency]);\n\n  return null;\n};\n\nEffectConsumer.propTypes = {\n  type: EffectTypes.isRequired,\n  id: PropTypes.oneOfType([\n    PropTypes.string.isRequired,\n    PropTypes.number.isRequired,\n  ]),\n  delayTime: PropTypes.string,\n  feedback: PropTypes.number,\n  wet: PropTypes.number,\n  low: PropTypes.number,\n  mid: PropTypes.number,\n  high: PropTypes.number,\n  lowFrequency: PropTypes.number,\n  highFrequency: PropTypes.number,\n  // <Track /> Props\n  onAddToEffectsChain: PropTypes.func,\n  onRemoveFromEffectsChain: PropTypes.func,\n};\n\nconst Effect = (props) => {\n  const { onAddToEffectsChain, onRemoveFromEffectsChain } = useContext(\n    TrackContext,\n  );\n\n  return (\n    <EffectConsumer\n      onAddToEffectsChain={onAddToEffectsChain}\n      onRemoveFromEffectsChain={onRemoveFromEffectsChain}\n      {...props}\n    />\n  );\n};\n\nexport default Effect;\n"],"names":["SongContext","React","createContext","Song","isPlaying","bpm","swing","swingSubdivision","volume","isMuted","children","Transport","value","start","Tone","context","stop","Master","mute","window","propTypes","PropTypes","bool","number","oneOf","node","instruments","id","name","props","effects","config","NoteType","shape","string","isRequired","StepNoteType","oneOfType","StepType","arrayOf","InstrumentTypes","map","effect","EffectTypes","buildSequencerStep","step","i","note","duration","velocity","Array","isArray","s","usePrevious","ref","useRef","current","TrackContext","TrackConsumer","steps","pan","solo","subdivision","onStepPlay","useState","effectsChain","setEffectsChain","setInstruments","sequencer","instrumentsRef","sequencerSteps","prevSequencerSteps","Sequence","time","notes","forEach","instrument","triggerAttackRelease","undefined","index","isEqual","equal","remove","add","JSON","stringify","cleanup","dispose","handleAddToEffectsChain","prevEffectsChain","handleRemoveFromEffectsChain","filter","e","handleInstrumentsUpdate","newInstruments","element","func","Track","useContext","InstrumentConsumer","type","options","polyphony","oscillator","envelope","samples","onLoad","onInstrumentsUpdate","instrumentRef","trackChannelBase","Channel","prevNotes","Sampler","curve","release","MembraneSynth","buildSynthOptions","MetalSynth","NoiseSynth","PluckSynth","synth","AMSynth","DuoSynth","FMSynth","MonoSynth","Synth","PolySynth","chain","set","triggerAttack","n","length","triggerRelease","disconnect","object","array","Instrument","EffectConsumer","delayTime","feedback","wet","low","mid","high","lowFrequency","highFrequency","onAddToEffectsChain","onRemoveFromEffectsChain","AutoFilter","AutoPanner","AutoWah","BitCrusher","Distortion","FeedbackDelay","Freeverb","PanVol","Tremolo","EQ3","Effect"],"mappings":"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"}