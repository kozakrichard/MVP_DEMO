{"ast":null,"code":"var _jsxFileName = \"/Users/nigel/Documents/GitHub/test/src/components/MusicComponents/PianoRoll.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Song, Track, Instrument } from 'reactronica';\nimport './PianoRoll.css'; // import ClearGrid from './clearGrid.js'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function PianoRoll(props) {\n  _s();\n\n  const [isPlaying, setIsPlaying] = useState(false);\n  var previousStepIndex = useRef(1);\n  const numOfCol = useRef(0);\n  const numOfCells = useRef(0);\n  const [currentStepIndex, setCurrentStepIndex] = useState(-1);\n  const notes = ['C8', 'B7', 'A#7 ', 'A7', 'G#7 ', 'G7', 'F#7', 'F7', 'E7', 'D#7', ' D7', 'C#7', 'C7', 'B6', 'A#6 ', 'A6', 'G#6 ', 'G6', 'F#6', 'F6', 'E6', 'D#6', ' D6', 'C#6', 'C6', 'B5', 'A#5 ', 'A5', 'G#5 ', 'G5', 'F#5', 'F5', 'E5', 'D#5', ' D5', 'C#5', 'C5', 'B4', 'A#4 ', 'A4', 'G#4 ', 'G4', 'F#4', 'F4', 'E4', 'D#4', ' D4', 'C#4', 'C4', 'B3', 'A#3 ', 'A3', 'G#3 ', 'G3', 'F#3', 'F3', 'E3', 'D#3', ' D3', 'C#3', 'C3', 'B2', 'A#2 ', 'A2', 'G#2 ', 'G2', 'F#2', 'F2', 'E2', 'D#2', ' D2', 'C#2', 'C2', 'B1', 'A#1 ', 'A1', 'G#1 ', 'G1', 'F#1', 'F1 ', 'E1', 'D#1', ' D1', 'C#1', 'C1', 'B0', 'A#0', 'A0'];\n  const steps = useRef([[], [], [], [], [], [], [], []]);\n\n  const hello = e => {\n    return e;\n  };\n\n  const handleClear = () => {\n    setIsPlaying(false); //console.log(\"clicked\");\n\n    const testblues = document.querySelectorAll('div.piano-roll-cell.blue'); //console.log(testblues.length);\n\n    for (let i = 0; i < testblues.length; i++) {\n      testblues[i].classList.toggle('blue'); //if (steps.current[col].indexOf(notes[row]) === -1) {\n      //      steps.current[col] = steps.current[col].concat([notes[row]]);\n      //  } \n      //console.log(\"found blue\"); \n    }\n\n    for (let i = 0; i < steps.current.length; i++) {\n      steps.current[i] = [];\n    }\n  };\n\n  const handleRandom = () => {\n    handleClear();\n    const randoms = document.querySelectorAll('div.piano-roll-cell');\n    let col = 0;\n    let row = 0;\n\n    for (let i = 0; i < randoms.length; i++) {\n      row = i % 88;\n      var y = Math.random();\n      col = (Math.round(y * 420) + 1) % steps.current.length;\n\n      if (y < 0.1) {\n        //if (steps.current[col].indexOf(notes[row]) === -1)\n        //{\n        //steps.current[col] = steps.current[col].concat([notes[row]]);\n        //console.log(notes[row]);\n        //}\n        //console.log(`row: ${row}, col ${col},  i: ${i}, row * col ${row * col}, bool: ${randoms[(88*col)+row].classList.contains('blue')}`)\n        if (randoms[88 * col + row].classList.contains('blue') === false) {\n          randoms[88 * col + row].classList.toggle('blue');\n          steps.current[col] = steps.current[col].concat([notes[row]]);\n        } //console.log(steps.current);\n        //console.log(steps.current[0]);\n        //console.log(steps.current[col]);\n        //steps.current[col] = steps.current[col].concat([notes[row]]);\n\n      } // col++;\n      // if (i % 8 === 0)\n      // {\n      //     col = col - 8;\n      //     row++;\n      //     console.log(\"here\");\n      // }\n\n    }\n\n    console.log(`randomize: ${steps.current[0]}`);\n  };\n\n  const decrementColumn = () => {\n    setIsPlaying(false);\n    var t = document.querySelector('.piano-roll-container--scrollable');\n    var all_col = document.querySelectorAll('.piano-roll-col-container');\n    console.log(`all_col: ${all_col.length}, cols: ${numOfCol.current}`);\n\n    if (all_col.length === 8) {\n      return;\n    }\n\n    t.removeChild(all_col[all_col.length - 1]);\n    steps.current.pop();\n    numOfCol.current = all_col.length - 1;\n    console.log(`steps.current: ${steps.current}, cols: ${numOfCol.current}`);\n    numOfCells.current -= 88;\n  }; // creates nodes(html elements/tag/object) and appends the node as a child of the container(inserts node into element container) \n  // to make a different colored cell for the sharp notes, regex pattern was made and used to match values a\n\n\n  const addColumnElement = (index = 0) => {\n    const piano_roll_container = document.querySelector('.piano-roll-container--scrollable');\n    const pattern = /\\w#\\d/g;\n    const T = document.querySelector('.tes');\n    let col_container = document.createElement('div');\n    col_container.classList.add('piano-roll-col-container');\n    let col_label = document.createElement('div');\n    col_label.classList.add('piano-roll-col-label');\n    let span = document.createElement('span');\n    span.innerText = index;\n    col_label.appendChild(span);\n    col_container.appendChild(col_label);\n\n    for (let j = 0; j < notes.length; j++) {\n      let col_cell = document.createElement('div');\n      col_cell.classList.add('piano-roll-cell');\n\n      if (numOfCells.current >= 703) {\n        let row;\n        let col = 0;\n\n        for (row = numOfCells.current + 1; row > notes.length - 1;) {\n          row -= notes.length;\n          col++;\n        }\n\n        numOfCells.current = numOfCells.current + 1;\n        col_cell.addEventListener('click', () => {\n          col_cell.classList.toggle('blue');\n          setIsPlaying(false); //console.log(`row: ${row}. col:${col}, notes.length: ${notes.length}, numOfCells: ${numOfCells.current}` );\n          // console.log(`row: ${row}, col: ${col}, index%8 = ${index%8}`)\n\n          T.innerHTML = `col: ${col}, row: ${row}, index%8 = ${index % 8}`;\n\n          if (steps.current[col].indexOf(notes[row]) != -1) {\n            steps.current[col] = steps.current[col].filter(a => {\n              return a != notes[row];\n            }); // console.log(steps.current);\n            // console.log('indexof 0');\n\n            return;\n          } // if the note doesn't exist replace row with one that has been concatinated with the note/value\n\n\n          if (steps.current[col].indexOf(notes[row]) == -1) {\n            steps.current[col] = steps.current[col].concat([notes[row]]); // console.log(steps.current);\n            // console.log('indexof -1')\n\n            return;\n          }\n        });\n      }\n\n      if (notes[j].match(pattern)) col_cell.classList.add('sharp-color');\n      col_container.appendChild(col_cell);\n    }\n\n    piano_roll_container.appendChild(col_container); // console.log(col_container);\n  };\n\n  const incrementColumn = () => {\n    setIsPlaying(false);\n    var t = document.querySelector('.piano-roll-container--scrollable');\n    var all_col = document.querySelectorAll('.piano-roll-col-container');\n    steps.current = steps.current.concat([[]]);\n    numOfCol.current += 1;\n    addColumnElement(numOfCol.current);\n    console.log('added new column, so the current amount of columns are:', numOfCol.current);\n  };\n\n  const clearColLabel = () => {\n    const purple_col = document.querySelector(\".purple\");\n    purple_col.classList.remove('purple');\n  };\n\n  useEffect(() => {\n    const col_label = document.querySelectorAll('.piano-roll-col-label');\n    col_label.forEach(e => {\n      if (e.classList.contains('purple')) console.log('purple');\n    });\n\n    if (isPlaying) {\n      col_label[(previousStepIndex.current + 1) % (numOfCol.current - 1)].classList.remove('purple'); // console.log( `prev plus 1 element = ${(previousStepIndex.current+1)%(numOfCol-1)}, previousIndex: ${previousStepIndex.current}, currentIndex: ${currentStepIndex}`);\n\n      col_label[previousStepIndex.current].classList.remove('purple');\n      col_label[currentStepIndex].classList.add('purple');\n    }\n  }, [currentStepIndex]);\n\n  const initializePianoRoll = () => {\n    let i = 1;\n\n    for (; i <= 8; i++) {\n      addColumnElement(i);\n      numOfCol.current += 1;\n    }\n\n    const row_label = document.querySelector('.piano-roll-row-container');\n    const pattern = /\\w#\\d/g;\n    notes.forEach(e => {\n      var di = document.createElement('div');\n      var span = document.createElement('span');\n      span.innerText = e;\n      di.appendChild(span);\n      di.classList.add('piano-roll-row-label');\n      if (e.match(pattern)) di.classList.add('sharp-color');\n      row_label.appendChild(di);\n      if (e == \"C4\") span.scrollIntoView();\n    });\n  };\n\n  useEffect(() => {\n    const T = document.querySelector('.tes');\n    initializePianoRoll();\n    const test = document.querySelectorAll('.piano-roll-cell'); // aggregates all elements with that className\n    // console.log(test);\n    // for each element\n    // 1 - toggle class on click\n    // 2 - print the row and col of element\n    // 3 - add to matrix (using useRef at the moment. I will try to change that later) if element value is not in matrix\n    // 4 - remove element accordingly if value exists in same row of matrix\n\n    test.forEach((e, index, array) => {\n      numOfCells.current = index;\n      e.addEventListener('click', () => {\n        setIsPlaying(false); // console.log(index%8);\n\n        let col = 0;\n        let row;\n\n        for (row = index; row > notes.length - 1;) {\n          row -= notes.length;\n          col++;\n        } // console.log(`row: ${row}, col: ${col}, index%8 = ${index%8}`)\n\n\n        e.classList.toggle('blue');\n        T.innerHTML = `col: ${col}, row: ${row}, index%8 = ${index % 8}`; // console.log(`row: ${row}, col: ${col}, index%8 = ${index%8}`)\n        // setSteps(steps[col] = steps[col].concat([notes[row]]));\n        // console.log(steps.current[col].indexOf(notes[row]));\n        // if the note exists in appropriate row replace that row with an array without element\n        // console.log(\"clicked\", steps.current[col].indexOf(notes[row]));\n\n        if (steps.current[col].indexOf(notes[row]) != -1) {\n          steps.current[col] = steps.current[col].filter(a => {\n            return a != notes[row];\n          }); // console.log(steps.current);\n          // console.log('indexof 0');\n\n          return;\n        } // if the note doesn't exist replace row with one that has been concatinated with the note/value\n\n\n        if (steps.current[col].indexOf(notes[row]) == -1) {\n          steps.current[col] = steps.current[col].concat([notes[row]]); // console.log(steps.current);\n          // console.log('indexof -1')\n\n          return;\n        }\n      }); // console.log('done\\n');\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"piano-roll-landing-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"tes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"clickables\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"button\",\n          onClick: () => {\n            setIsPlaying(!isPlaying);\n          },\n          children: !isPlaying ? 'Play' : 'Stop'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"button\",\n          onClick: handleClear,\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"button\",\n          onClick: handleRandom,\n          children: \"Randomizer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Song, {\n        isPlaying: isPlaying,\n        bpm: props.bpm,\n        children: /*#__PURE__*/_jsxDEV(Track, {\n          steps: steps.current // Callback triggers on every step\n          ,\n          onStepPlay: (stepNotes, index) => {\n            setCurrentStepIndex(index);\n            console.log(`prev.current:  ${previousStepIndex.current}, track index: ${index}, calc: ${(index + (numOfCol.current - 2)) % (numOfCol.current - 1)} numOfCol: ${numOfCol.current}`);\n            previousStepIndex.current = (index + (numOfCol.current - 1)) % numOfCol.current;\n            console.log(`num of col: ${numOfCol.current}`);\n          },\n          volume: props.vol,\n          children: /*#__PURE__*/_jsxDEV(Instrument, {\n            type: \"polySynth\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"piano-roll-container\",\n        children: /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"piano-roll-container--scrollable\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"piano-roll-row-container\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"piano-roll-row-label\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 331,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(PianoRoll, \"dJ+abbETVPu0PBLCqDjH4PvjAXc=\");\n\n_c = PianoRoll;\n\nvar _c;\n\n$RefreshReg$(_c, \"PianoRoll\");","map":{"version":3,"sources":["/Users/nigel/Documents/GitHub/test/src/components/MusicComponents/PianoRoll.js"],"names":["React","useState","useEffect","useRef","Song","Track","Instrument","PianoRoll","props","isPlaying","setIsPlaying","previousStepIndex","numOfCol","numOfCells","currentStepIndex","setCurrentStepIndex","notes","steps","hello","e","handleClear","testblues","document","querySelectorAll","i","length","classList","toggle","current","handleRandom","randoms","col","row","y","Math","random","round","contains","concat","console","log","decrementColumn","t","querySelector","all_col","removeChild","pop","addColumnElement","index","piano_roll_container","pattern","T","col_container","createElement","add","col_label","span","innerText","appendChild","j","col_cell","addEventListener","innerHTML","indexOf","filter","a","match","incrementColumn","clearColLabel","purple_col","remove","forEach","initializePianoRoll","row_label","di","scrollIntoView","test","array","bpm","stepNotes","vol"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Song, Track, Instrument } from 'reactronica';\nimport './PianoRoll.css';\n// import ClearGrid from './clearGrid.js'\n\nexport default function PianoRoll(props) {\n    const [isPlaying, setIsPlaying] = useState(false);\n    var previousStepIndex = useRef(1);\n    const numOfCol = useRef(0);\n    const numOfCells = useRef(0);\n    const [currentStepIndex, setCurrentStepIndex] = useState(-1);\n    const notes = ['C8' , 'B7' , 'A#7 ' , 'A7' , 'G#7 ' , 'G7' , 'F#7' , 'F7' , 'E7' , 'D#7' , ' D7' , 'C#7' , 'C7' , 'B6' , 'A#6 ' , 'A6' , 'G#6 ' , 'G6' , 'F#6' , 'F6' , 'E6' , 'D#6' , ' D6' , 'C#6' , 'C6' , 'B5' , 'A#5 ' , 'A5' , 'G#5 ' , 'G5' , 'F#5' , 'F5' , 'E5' , 'D#5' , ' D5' , 'C#5' , 'C5' , 'B4' , 'A#4 ' , 'A4' , 'G#4 ' , 'G4' , 'F#4' , 'F4' , 'E4' , 'D#4' , ' D4' , 'C#4' , 'C4' , 'B3' , 'A#3 ' , 'A3' , 'G#3 ' , 'G3' , 'F#3' , 'F3' , 'E3' , 'D#3' , ' D3' , 'C#3' , 'C3' , 'B2' , 'A#2 ' , 'A2' , 'G#2 ' , 'G2' , 'F#2' , 'F2' , 'E2' , 'D#2' , ' D2' , 'C#2' , 'C2' , 'B1' , 'A#1 ' , 'A1' , 'G#1 ' , 'G1' , 'F#1' , 'F1 ' , 'E1' , 'D#1' , ' D1' , 'C#1' , 'C1' , 'B0' , 'A#0' , 'A0'];\n\n    const steps = useRef([\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n    ])\n    \n    \n    \n    const hello = (e) =>{\n        return e;\n    }\n\n    const handleClear = () => {\n        setIsPlaying(false);\n        //console.log(\"clicked\");\n        const testblues = document.querySelectorAll('div.piano-roll-cell.blue');\n        //console.log(testblues.length);\n        for (let i = 0; i < testblues.length; i++)\n        {\n            testblues[i].classList.toggle('blue');\n            //if (steps.current[col].indexOf(notes[row]) === -1) {\n              //      steps.current[col] = steps.current[col].concat([notes[row]]);\n              //  } \n            //console.log(\"found blue\"); \n        }\n        for (let i = 0; i < steps.current.length; i++) {\n            steps.current[i] = [];\n        }\n    };\n\n    const handleRandom = () => {\n        handleClear();\n        const randoms = document.querySelectorAll('div.piano-roll-cell');\n        let col = 0;\n        let row = 0;\n        for (let i = 0; i < randoms.length; i++)\n        {    \n            row = i % 88;\n            var y = Math.random();\n            col = (Math.round(y * 420) +1) % steps.current.length;\n            if (y < 0.1)\n            {\n               //if (steps.current[col].indexOf(notes[row]) === -1)\n                //{\n                //steps.current[col] = steps.current[col].concat([notes[row]]);\n                    //console.log(notes[row]);\n                \n                //}\n                //console.log(`row: ${row}, col ${col},  i: ${i}, row * col ${row * col}, bool: ${randoms[(88*col)+row].classList.contains('blue')}`)\n                if(randoms[(88*col)+row].classList.contains('blue') === false){\n                    randoms[(88*col)+row].classList.toggle('blue');\n                    steps.current[col] = steps.current[col].concat([notes[row]]);\n\n                }\n                //console.log(steps.current);\n                //console.log(steps.current[0]);\n                //console.log(steps.current[col]);\n                //steps.current[col] = steps.current[col].concat([notes[row]]);\n            }\n            // col++;\n            // if (i % 8 === 0)\n            // {\n            //     col = col - 8;\n            //     row++;\n            //     console.log(\"here\");\n            // }\n            \n        }\n        console.log(`randomize: ${steps.current[0]}`);\n    };\n\n    const decrementColumn = () =>{\n        setIsPlaying(false);\n        var t = document.querySelector('.piano-roll-container--scrollable');\n        var all_col = document.querySelectorAll('.piano-roll-col-container');\n        console.log(`all_col: ${all_col.length}, cols: ${numOfCol.current}`)\n\n        if(all_col.length === 8) {\n            return;\n        }\n       \n        t.removeChild(all_col[all_col.length-1]);\n        steps.current.pop();\n        numOfCol.current = all_col.length-1;\n        console.log(`steps.current: ${steps.current}, cols: ${numOfCol.current}`);\n        \n        numOfCells.current -= 88;\n\n    }\n\n    // creates nodes(html elements/tag/object) and appends the node as a child of the container(inserts node into element container) \n    // to make a different colored cell for the sharp notes, regex pattern was made and used to match values a\n    const addColumnElement = (index = 0) => {\n        const piano_roll_container = document.querySelector('.piano-roll-container--scrollable');\n        const pattern  = /\\w#\\d/g;\n        const T = document.querySelector('.tes') ;\n   \n\n        let col_container = document.createElement('div');\n        col_container.classList.add('piano-roll-col-container');\n        let col_label = document.createElement('div');\n        col_label.classList.add('piano-roll-col-label');\n\n        let span = document.createElement('span');\n        span.innerText = index;\n        col_label.appendChild(span);\n        col_container.appendChild(col_label);\n        for(let j=0; j < notes.length; j++){\n            let col_cell = document.createElement('div');\n            col_cell.classList.add('piano-roll-cell');\n            if(numOfCells.current >= 703){\n            let row;\n            let col=0;\n            for(row = numOfCells.current+1; row > notes.length-1;){\n                row -= notes.length;\n                col++;\n            }\n            numOfCells.current = numOfCells.current+1;\n            col_cell.addEventListener('click',()=>{\n                col_cell.classList.toggle('blue');\n                setIsPlaying(false);\n                \n                //console.log(`row: ${row}. col:${col}, notes.length: ${notes.length}, numOfCells: ${numOfCells.current}` );\n\n                \n                // console.log(`row: ${row}, col: ${col}, index%8 = ${index%8}`)\n                T.innerHTML = `col: ${col}, row: ${row}, index%8 = ${index%8}`;\n                \n\n                if(steps.current[col].indexOf(notes[row]) != -1) {\n                    steps.current[col] = steps.current[col].filter((a) => {\n                        return a != notes[row];\n                    });\n                    // console.log(steps.current);\n                    // console.log('indexof 0');\n                    return;\n                }\n                // if the note doesn't exist replace row with one that has been concatinated with the note/value\n                if(steps.current[col].indexOf(notes[row]) == -1){\n                    steps.current[col] = steps.current[col].concat([notes[row]]);\n                    // console.log(steps.current);\n                    // console.log('indexof -1')\n                    return;\n                }\n            })}\n            if(notes[j].match(pattern)) col_cell.classList.add('sharp-color');\n            col_container.appendChild(col_cell);\n        }\n        \n\n        piano_roll_container.appendChild(col_container);\n        // console.log(col_container);\n        \n    }\n\n    const incrementColumn = () =>{\n        setIsPlaying(false);\n\n        var t = document.querySelector('.piano-roll-container--scrollable');\n\n        var all_col = document.querySelectorAll('.piano-roll-col-container');\n        steps.current = steps.current.concat([[]]);\n        numOfCol.current+=1;\n        addColumnElement(numOfCol.current);\n\n        console.log( 'added new column, so the current amount of columns are:' ,numOfCol.current)\n    }\n\n    const clearColLabel = () =>{\n        const purple_col = document.querySelector(\".purple\");\n        purple_col.classList.remove('purple');\n    }\n    useEffect(()=>{\n        const col_label = document.querySelectorAll('.piano-roll-col-label');\n        col_label.forEach((e)=>{\n            if(e.classList.contains('purple') ) console.log('purple');\n        })\n        \n        if(isPlaying){\n         \n            col_label[(previousStepIndex.current+1)%(numOfCol.current-1)].classList.remove('purple');\n            // console.log( `prev plus 1 element = ${(previousStepIndex.current+1)%(numOfCol-1)}, previousIndex: ${previousStepIndex.current}, currentIndex: ${currentStepIndex}`);\n            col_label[previousStepIndex.current].classList.remove('purple');\n            col_label[currentStepIndex].classList.add('purple');\n        }\n    },[currentStepIndex])\n    \n    const initializePianoRoll = () => {\n        let i=1;\n        for( ;i <= 8; i++){\n            addColumnElement(i);\n            numOfCol.current += 1 ;\n        }\n        \n        const row_label = document.querySelector('.piano-roll-row-container');\n        const pattern = /\\w#\\d/g;\n        notes.forEach((e)=>{\n            var di =  document.createElement('div');\n            var span = document.createElement('span');\n           \n            span.innerText = e;\n            di.appendChild(span);\n            di.classList.add('piano-roll-row-label');\n            if(e.match(pattern)) di.classList.add('sharp-color');\n            row_label.appendChild(di);\n\n            if (e == \"C4\") span.scrollIntoView();\n        })\n    }\n    useEffect(()=>{\n        const T = document.querySelector('.tes') ;\n        \n        initializePianoRoll();\n\n        const test = document.querySelectorAll('.piano-roll-cell'); // aggregates all elements with that className\n        // console.log(test);\n        // for each element\n        // 1 - toggle class on click\n        // 2 - print the row and col of element\n        // 3 - add to matrix (using useRef at the moment. I will try to change that later) if element value is not in matrix\n        // 4 - remove element accordingly if value exists in same row of matrix\n        test.forEach( (e,index,array) => {\n            numOfCells.current = index;\n            e.addEventListener('click',()=>{\n                setIsPlaying(false);\n                // console.log(index%8);\n                let col = 0;\n                let row; \n                for(row = index; row > notes.length-1;){\n                    row -= notes.length;\n                    col++;\n                }\n                \n                // console.log(`row: ${row}, col: ${col}, index%8 = ${index%8}`)\n                e.classList.toggle('blue');\n                T.innerHTML = `col: ${col}, row: ${row}, index%8 = ${index%8}`;\n                // console.log(`row: ${row}, col: ${col}, index%8 = ${index%8}`)\n                // setSteps(steps[col] = steps[col].concat([notes[row]]));\n                // console.log(steps.current[col].indexOf(notes[row]));\n                // if the note exists in appropriate row replace that row with an array without element\n                // console.log(\"clicked\", steps.current[col].indexOf(notes[row]));\n                if(steps.current[col].indexOf(notes[row]) != -1) {\n                    steps.current[col] = steps.current[col].filter((a) => {\n                        return a != notes[row];\n                    });\n                    // console.log(steps.current);\n                    // console.log('indexof 0');\n                    return;\n                }\n                // if the note doesn't exist replace row with one that has been concatinated with the note/value\n                if(steps.current[col].indexOf(notes[row]) == -1){\n                    steps.current[col] = steps.current[col].concat([notes[row]]);\n                    // console.log(steps.current);\n                    // console.log('indexof -1')\n                    return;\n                }\n               \n            })\n            // console.log('done\\n');\n\n            \n        })\n    },[]);\n\n\n\n    return (\n        <>\n            <div className=\"piano-roll-landing-container\">\n                <p className=\"tes\"></p>\n                    <div className= \"clickables\">\n                        <button class=\"button\" onClick={() => {\n                            setIsPlaying(!isPlaying);\n                        }}>\n                            {!isPlaying ? 'Play' : 'Stop'}\n                        </button>\n\n                        <button class=\"button\" onClick={handleClear}>Clear</button>\n\n                        <button class=\"button\" onClick={handleRandom}>Randomizer</button>\n                        {/* <button onClick={decrementColumn}> \n                            remove column\n                        </button>\n                        <button onClick={incrementColumn}> \n                            add column\n                        </button> */}\n                        {/* <button onClick={() => setIsPlaying(!isPlaying)}>\n                            {!isPlaying ? 'Play' : 'Stop'}\n                        </button> */}\n                    </div>\n                {/* Reactronica Components */}\n                <Song isPlaying={isPlaying} bpm={props.bpm} >\n                    <Track\n                        steps={steps.current}\n                        // Callback triggers on every step\n                        onStepPlay={(stepNotes, index) => {\n                        \n                            setCurrentStepIndex(index);\n                            console.log(`prev.current:  ${previousStepIndex.current }, track index: ${index}, calc: ${(index+(numOfCol.current-2)) % (numOfCol.current-1)} numOfCol: ${numOfCol.current}`)\n                            previousStepIndex.current = (index + (numOfCol.current-1)) % (numOfCol.current);\n                            console.log(`num of col: ${numOfCol.current}`)\n                        }}\n                        volume={props.vol}\n                    >\n                        <Instrument type=\"polySynth\" />\n                    </Track>\n                </Song>\n                \n                <section className=\"piano-roll-container\">\n                    <section className=\"piano-roll-container--scrollable\">\n                        <div className=\"piano-roll-row-container\">\n                            <div className=\"piano-roll-row-label\" >\n                                <span></span>\n                            </div>\n                            \n                        \n                        </div>\n                    </section>\n                </section>\n\n            </div>\n            <div>\n\n            </div>\n        </>\n    );\n}"]},"metadata":{},"sourceType":"module"}