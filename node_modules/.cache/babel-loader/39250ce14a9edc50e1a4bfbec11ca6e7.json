{"ast":null,"code":"var _jsxFileName = \"/Users/nigel/Documents/GitHub/test/src/components/MusicComponents/PianoRoll.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Song, Track, Instrument } from 'reactronica';\nimport './PianoRoll.css';\nimport axios from 'axios'; // import ClearGrid from './clearGrid.js'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function PianoRoll(props) {\n  _s();\n\n  var previousStepIndex = useRef(1);\n  const numOfCol = useRef(0);\n  const numOfCells = useRef(0);\n  const [currentStepIndex, setCurrentStepIndex] = useState(-1);\n  const notes = ['C8', 'B7', 'A#7', 'A7', 'G#7', 'G7', 'F#7', 'F7', 'E7', 'D#7', 'D7', 'C#7', 'C7', 'B6', 'A#6', 'A6', 'G#6', 'G6', 'F#6', 'F6', 'E6', 'D#6', 'D6', 'C#6', 'C6', 'B5', 'A#5', 'A5', 'G#5', 'G5', 'F#5', 'F5', 'E5', 'D#5', 'D5', 'C#5', 'C5', 'B4', 'A#4', 'A4', 'G#4', 'G4', 'F#4', 'F4', 'E4', 'D#4', 'D4', 'C#4', 'C4', 'B3', 'A#3', 'A3', 'G#3', 'G3', 'F#3', 'F3', 'E3', 'D#3', 'D3', 'C#3', 'C3', 'B2', 'A#2', 'A2', 'G#2', 'G2', 'F#2', 'F2', 'E2', 'D#2', 'D2', 'C#2', 'C2', 'B1', 'A#1', 'A1', 'G#1', 'G1', 'F#1', 'F1', 'E1', 'D#1', 'D1', 'C#1', 'C1', 'B0', 'A#0', 'A0'];\n  const steps = useRef([[], [], [], [], [], [], [], []]);\n  localStorage.setItem('CURRENT_STEPS', JSON.stringify(steps.current));\n\n  const hello = e => {\n    return e;\n  };\n\n  const handleClear = () => {\n    props.setPlay(false); //console.log(\"clicked\");\n\n    const testblues = document.querySelectorAll('div.piano-roll-cell.blue'); //console.log(testblues.length);\n\n    for (let i = 0; i < testblues.length; i++) {\n      testblues[i].classList.toggle('blue'); //if (steps.current[col].indexOf(notes[row]) === -1) {\n      //      steps.current[col] = steps.current[col].concat([notes[row]]);\n      //  } \n      //console.log(\"found blue\"); \n    }\n\n    for (let i = 0; i < steps.current.length; i++) {\n      steps.current[i] = [];\n    }\n\n    clearColLabel();\n    localStorage.setItem('CURRENT_STEPS', JSON.stringify(steps.current));\n  };\n\n  const handleRandom = () => {\n    handleClear();\n    const randoms = document.querySelectorAll('div.piano-roll-cell');\n    let col = 0;\n    let row = 0;\n\n    for (let i = 0; i < randoms.length; i++) {\n      row = i % 88;\n      var y = Math.random();\n      col = (Math.round(y * 420) + 1) % steps.current.length;\n\n      if (y < 0.1) {\n        //if (steps.current[col].indexOf(notes[row]) === -1)\n        //{\n        //steps.current[col] = steps.current[col].concat([notes[row]]);\n        //console.log(notes[row]);\n        //}\n        //console.log(`row: ${row}, col ${col},  i: ${i}, row * col ${row * col}, bool: ${randoms[(88*col)+row].classList.contains('blue')}`)\n        if (randoms[88 * col + row].classList.contains('blue') === false) {\n          randoms[88 * col + row].classList.toggle('blue');\n          steps.current[col] = steps.current[col].concat([notes[row]]);\n        } //console.log(steps.current);\n        //console.log(steps.current[0]);\n        //console.log(steps.current[col]);\n        //steps.current[col] = steps.current[col].concat([notes[row]]);\n\n      } // col++;\n      // if (i % 8 === 0)\n      // {\n      //     col = col - 8;\n      //     row++;\n      //     console.log(\"here\");\n      // }\n\n    }\n\n    console.log(`randomize: ${steps.current[0]}`);\n    localStorage.setItem('CURRENT_STEPS', JSON.stringify(steps.current));\n  };\n\n  const decrementColumn = () => {\n    props.setPlay(false);\n    var t = document.querySelector('.piano-roll-container--scrollable');\n    var all_col = document.querySelectorAll('.piano-roll-col-container');\n    console.log(`all_col: ${all_col.length}, cols: ${numOfCol.current}`);\n\n    if (all_col.length === 8) {\n      return;\n    }\n\n    t.removeChild(all_col[all_col.length - 1]);\n    steps.current.pop();\n    numOfCol.current = all_col.length - 1;\n    console.log(`steps.current: ${steps.current}, cols: ${numOfCol.current}`);\n    numOfCells.current -= 88;\n  }; // creates nodes(html elements/tag/object) and appends the node as a child of the container(inserts node into element container) \n  // to make a different colored cell for the sharp notes, regex pattern was made and used to match values a\n\n\n  const addColumnElement = (index = 0) => {\n    const piano_roll_container = document.querySelector('.piano-roll-container--scrollable');\n    const pattern = /\\w#\\d/g;\n    const T = document.querySelector('.tes');\n    let col_container = document.createElement('div');\n    col_container.classList.add('piano-roll-col-container');\n    let col_label = document.createElement('div');\n    col_label.classList.add('piano-roll-col-label');\n    let span = document.createElement('span');\n    span.innerText = index;\n    col_label.appendChild(span);\n    col_container.appendChild(col_label);\n\n    for (let j = 0; j < notes.length; j++) {\n      let col_cell = document.createElement('div');\n      col_cell.classList.add('piano-roll-cell');\n\n      if (numOfCells.current >= 703) {\n        let row;\n        let col = 0;\n\n        for (row = numOfCells.current + 1; row > notes.length - 1;) {\n          row -= notes.length;\n          col++;\n        }\n\n        numOfCells.current = numOfCells.current + 1;\n        col_cell.addEventListener('click', () => {\n          col_cell.classList.toggle('blue');\n          props.setPlay(false); //console.log(`row: ${row}. col:${col}, notes.length: ${notes.length}, numOfCells: ${numOfCells.current}` );\n          //console.log(`row: ${row}. col:${col}, notes.length: ${notes.length}, numOfCells: ${numOfCells.current}` );\n          // console.log(`row: ${row}, col: ${col}, index%8 = ${index%8}`)\n\n          T.innerHTML = `col: ${col}, row: ${row}, index%8 = ${index % 8}`;\n\n          if (steps.current[col].indexOf(notes[row]) != -1) {\n            steps.current[col] = steps.current[col].filter(a => {\n              return a != notes[row];\n            }); // console.log(steps.current);\n            // console.log('indexof 0');\n\n            return;\n          } // if the note doesn't exist replace row with one that has been concatinated with the note/value\n\n\n          if (steps.current[col].indexOf(notes[row]) == -1) {\n            steps.current[col] = steps.current[col].concat([notes[row]]); // console.log(steps.current);\n            // console.log('indexof -1')\n\n            return;\n          }\n        });\n      }\n\n      if (notes[j].match(pattern)) col_cell.classList.add('sharp-color');\n      col_container.appendChild(col_cell);\n    }\n\n    piano_roll_container.appendChild(col_container); // console.log(col_container);\n  };\n\n  const incrementColumn = () => {\n    props.setPlay(false);\n    var t = document.querySelector('.piano-roll-container--scrollable');\n    var all_col = document.querySelectorAll('.piano-roll-col-container');\n    steps.current = steps.current.concat([[]]);\n    numOfCol.current += 1;\n    addColumnElement(numOfCol.current);\n    console.log('added new column, so the current amount of columns are:', numOfCol.current);\n  };\n\n  const clearColLabel = () => {\n    const purple_col = document.querySelector(\".purple\");\n\n    try {\n      purple_col.classList.remove('purple');\n    } catch {\n      return;\n    }\n  };\n\n  useEffect(() => {\n    const col_label = document.querySelectorAll('.piano-roll-col-label');\n    col_label.forEach(e => {\n      if (e.classList.contains('purple')) console.log('purple');\n    });\n\n    if (props.play) {\n      col_label[(previousStepIndex.current + 1) % (numOfCol.current - 1)].classList.remove('purple'); // console.log( `prev plus 1 element = ${(previousStepIndex.current+1)%(numOfCol-1)}, previousIndex: ${previousStepIndex.current}, currentIndex: ${currentStepIndex}`);\n\n      col_label[previousStepIndex.current].classList.remove('purple');\n      col_label[currentStepIndex].classList.add('purple');\n    }\n  }, [currentStepIndex]);\n\n  const initializePianoRoll = () => {\n    let i = 1;\n\n    for (; i <= 8; i++) {\n      addColumnElement(i);\n      numOfCol.current += 1;\n    }\n\n    const row_label = document.querySelector('.piano-roll-row-container');\n    const pattern = /\\w#\\d/g;\n    notes.forEach(e => {\n      var di = document.createElement('div');\n      var span = document.createElement('span');\n      span.innerText = e;\n      di.appendChild(span);\n      di.classList.add('piano-roll-row-label');\n      if (e.match(pattern)) di.classList.add('sharp-color');\n      row_label.appendChild(di);\n      if (e == \"C4\") di.scrollIntoView();\n    });\n  };\n\n  useEffect(() => {\n    const T = document.querySelector('.tes');\n    initializePianoRoll();\n    const test = document.querySelectorAll('.piano-roll-cell'); // aggregates all elements with that className\n    // console.log(test);\n    // for each element\n    // 1 - toggle class on click\n    // 2 - print the row and col of element\n    // 3 - add to matrix (using useRef at the moment. I will try to change that later) if element value is not in matrix\n    // 4 - remove element accordingly if value exists in same row of matrix\n\n    test.forEach((e, index, array) => {\n      numOfCells.current = index;\n      e.addEventListener('click', () => {\n        props.setPlay(false);\n        clearColLabel();\n        setCurrentStepIndex(-1); // console.log(index%8);\n\n        let col = 0;\n        let row;\n\n        for (row = index; row > notes.length - 1;) {\n          row -= notes.length;\n          col++;\n        }\n\n        localStorage.setItem('CURRENT_STEPS', JSON.stringify(steps.current)); // console.log(`row: ${row}, col: ${col}, index%8 = ${index%8}`)\n\n        e.classList.toggle('blue'); // T.innerHTML = `col: ${col}, row: ${row}, index%8 = ${index%8}`;\n        // console.log(`row: ${row}, col: ${col}, index%8 = ${index%8}`)\n        // setSteps(steps[col] = steps[col].concat([notes[row]]));\n        // console.log(steps.current[col].indexOf(notes[row]));\n        // if the note exists in appropriate row replace that row with an array without element\n        // console.log(\"clicked\", steps.current[col].indexOf(notes[row]));\n\n        if (steps.current[col].indexOf(notes[row]) != -1) {\n          steps.current[col] = steps.current[col].filter(a => {\n            return a != notes[row];\n          }); // console.log(steps.current);\n          // console.log('indexof 0');\n\n          return;\n        } // if the note doesn't exist replace row with one that has been concatinated with the note/value\n\n\n        if (steps.current[col].indexOf(notes[row]) == -1) {\n          steps.current[col] = steps.current[col].concat([notes[row]]); // console.log(steps.current);\n          // console.log('indexof -1')\n\n          return;\n        }\n      }); // console.log('done\\n');\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"piano-roll-landing-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"tes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"clickables\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"btn\",\n          onClick: handleClear,\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"btn\",\n          onClick: handleRandom,\n          children: \"Generate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Song, {\n        isPlaying: props.play,\n        bpm: props.bpm,\n        children: /*#__PURE__*/_jsxDEV(Track, {\n          steps: steps.current // Callback triggers on every step\n          ,\n          onStepPlay: (stepNotes, index) => {\n            setCurrentStepIndex(index);\n            console.log(`prev.current:  ${previousStepIndex.current}, track index: ${index}, calc: ${(index + (numOfCol.current - 2)) % (numOfCol.current - 1)} numOfCol: ${numOfCol.current}`);\n            previousStepIndex.current = (index + (numOfCol.current - 1)) % numOfCol.current;\n            console.log(`num of col: ${numOfCol.current}`);\n          },\n          volume: props.vol,\n          pan: props.pan,\n          children: /*#__PURE__*/_jsxDEV(Instrument, {\n            type: \"polySynth\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"piano-roll-container\",\n        children: /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"piano-roll-container--scrollable\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"piano-roll-row-container\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"piano-roll-row-label\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 346,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(PianoRoll, \"7sLrGhF6qmJzQC5ReQWmlWn2W9c=\");\n\n_c = PianoRoll;\n\nvar _c;\n\n$RefreshReg$(_c, \"PianoRoll\");","map":{"version":3,"sources":["/Users/nigel/Documents/GitHub/test/src/components/MusicComponents/PianoRoll.js"],"names":["React","useState","useEffect","useRef","Song","Track","Instrument","axios","PianoRoll","props","previousStepIndex","numOfCol","numOfCells","currentStepIndex","setCurrentStepIndex","notes","steps","localStorage","setItem","JSON","stringify","current","hello","e","handleClear","setPlay","testblues","document","querySelectorAll","i","length","classList","toggle","clearColLabel","handleRandom","randoms","col","row","y","Math","random","round","contains","concat","console","log","decrementColumn","t","querySelector","all_col","removeChild","pop","addColumnElement","index","piano_roll_container","pattern","T","col_container","createElement","add","col_label","span","innerText","appendChild","j","col_cell","addEventListener","innerHTML","indexOf","filter","a","match","incrementColumn","purple_col","remove","forEach","play","initializePianoRoll","row_label","di","scrollIntoView","test","array","bpm","stepNotes","vol","pan"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Song, Track, Instrument } from 'reactronica';\nimport './PianoRoll.css';\nimport axios from 'axios';\n// import ClearGrid from './clearGrid.js'\n\nexport default function PianoRoll(props) {\n    var previousStepIndex = useRef(1);\n    const numOfCol = useRef(0);\n    const numOfCells = useRef(0);\n    const [currentStepIndex, setCurrentStepIndex] = useState(-1);\n    const notes = ['C8' , 'B7' , 'A#7' , 'A7' , 'G#7' , 'G7' , 'F#7' , 'F7' , 'E7' , 'D#7' , 'D7' , 'C#7' , 'C7' , 'B6' , 'A#6' , 'A6' , 'G#6' , 'G6' , 'F#6' , 'F6' , 'E6' , 'D#6' , 'D6' , 'C#6' , 'C6' , 'B5' , 'A#5' , 'A5' , 'G#5' , 'G5' , 'F#5' , 'F5' , 'E5' , 'D#5' , 'D5' , 'C#5' , 'C5' , 'B4' , 'A#4' , 'A4' , 'G#4' , 'G4' , 'F#4' , 'F4' , 'E4' , 'D#4' , 'D4' , 'C#4' , 'C4' , 'B3' , 'A#3' , 'A3' , 'G#3' , 'G3' , 'F#3' , 'F3' , 'E3' , 'D#3' , 'D3' , 'C#3' , 'C3' , 'B2' , 'A#2' , 'A2' , 'G#2' , 'G2' , 'F#2' , 'F2' , 'E2' , 'D#2' , 'D2' , 'C#2' , 'C2' , 'B1' , 'A#1' , 'A1' , 'G#1' , 'G1' , 'F#1' , 'F1' , 'E1' , 'D#1' , 'D1' , 'C#1' , 'C1' , 'B0' , 'A#0' , 'A0'];\n\n    \n    const steps = useRef([\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n    ])\n\n    localStorage.setItem('CURRENT_STEPS', JSON.stringify(steps.current));\n\n    \n\n\n    const hello = (e) => {\n        return e;\n    }\n\n    const handleClear = () => {\n        props.setPlay(false);\n        //console.log(\"clicked\");\n        const testblues = document.querySelectorAll('div.piano-roll-cell.blue');\n        //console.log(testblues.length);\n        for (let i = 0; i < testblues.length; i++) {\n            testblues[i].classList.toggle('blue');\n            //if (steps.current[col].indexOf(notes[row]) === -1) {\n            //      steps.current[col] = steps.current[col].concat([notes[row]]);\n            //  } \n            //console.log(\"found blue\"); \n        }\n        for (let i = 0; i < steps.current.length; i++) {\n            steps.current[i] = [];\n        }\n        clearColLabel();\n        localStorage.setItem('CURRENT_STEPS', JSON.stringify(steps.current));\n    };\n\n    const handleRandom = () => {\n        handleClear();\n        const randoms = document.querySelectorAll('div.piano-roll-cell');\n        let col = 0;\n        let row = 0;\n        for (let i = 0; i < randoms.length; i++) {\n            row = i % 88;\n            var y = Math.random();\n            col = (Math.round(y * 420) + 1) % steps.current.length;\n            if (y < 0.1) {\n                //if (steps.current[col].indexOf(notes[row]) === -1)\n                //{\n                //steps.current[col] = steps.current[col].concat([notes[row]]);\n                //console.log(notes[row]);\n\n                //}\n                //console.log(`row: ${row}, col ${col},  i: ${i}, row * col ${row * col}, bool: ${randoms[(88*col)+row].classList.contains('blue')}`)\n                if (randoms[(88 * col) + row].classList.contains('blue') === false) {\n                    randoms[(88 * col) + row].classList.toggle('blue');\n                    steps.current[col] = steps.current[col].concat([notes[row]]);\n\n                }\n                //console.log(steps.current);\n                //console.log(steps.current[0]);\n                //console.log(steps.current[col]);\n                //steps.current[col] = steps.current[col].concat([notes[row]]);\n            }\n            // col++;\n            // if (i % 8 === 0)\n            // {\n            //     col = col - 8;\n            //     row++;\n            //     console.log(\"here\");\n            // }\n\n        }\n        console.log(`randomize: ${steps.current[0]}`);\n        localStorage.setItem('CURRENT_STEPS', JSON.stringify(steps.current));\n    };\n\n    const decrementColumn = () =>{\n        props.setPlay(false);\n        var t = document.querySelector('.piano-roll-container--scrollable');\n        var all_col = document.querySelectorAll('.piano-roll-col-container');\n        console.log(`all_col: ${all_col.length}, cols: ${numOfCol.current}`)\n\n        if (all_col.length === 8) {\n            return;\n        }\n\n        t.removeChild(all_col[all_col.length - 1]);\n        steps.current.pop();\n        numOfCol.current = all_col.length - 1;\n        console.log(`steps.current: ${steps.current}, cols: ${numOfCol.current}`);\n\n        numOfCells.current -= 88;\n\n    }\n\n    // creates nodes(html elements/tag/object) and appends the node as a child of the container(inserts node into element container) \n    // to make a different colored cell for the sharp notes, regex pattern was made and used to match values a\n    const addColumnElement = (index = 0) => {\n        const piano_roll_container = document.querySelector('.piano-roll-container--scrollable');\n        const pattern = /\\w#\\d/g;\n        const T = document.querySelector('.tes');\n\n\n        let col_container = document.createElement('div');\n        col_container.classList.add('piano-roll-col-container');\n        let col_label = document.createElement('div');\n        col_label.classList.add('piano-roll-col-label');\n\n        let span = document.createElement('span');\n        span.innerText = index;\n        col_label.appendChild(span);\n        col_container.appendChild(col_label);\n        for (let j = 0; j < notes.length; j++) {\n            let col_cell = document.createElement('div');\n            col_cell.classList.add('piano-roll-cell');\n            if(numOfCells.current >= 703){\n            let row;\n            let col=0;\n            for(row = numOfCells.current+1; row > notes.length-1;){\n                row -= notes.length;\n                col++;\n            }\n            numOfCells.current = numOfCells.current+1;\n            col_cell.addEventListener('click',()=>{\n                col_cell.classList.toggle('blue');\n                props.setPlay(false);\n                \n                //console.log(`row: ${row}. col:${col}, notes.length: ${notes.length}, numOfCells: ${numOfCells.current}` );\n\n                    //console.log(`row: ${row}. col:${col}, notes.length: ${notes.length}, numOfCells: ${numOfCells.current}` );\n\n\n                    // console.log(`row: ${row}, col: ${col}, index%8 = ${index%8}`)\n                    T.innerHTML = `col: ${col}, row: ${row}, index%8 = ${index % 8}`;\n\n\n                    if (steps.current[col].indexOf(notes[row]) != -1) {\n                        steps.current[col] = steps.current[col].filter((a) => {\n                            return a != notes[row];\n                        });\n                        // console.log(steps.current);\n                        // console.log('indexof 0');\n                        return;\n                    }\n                    // if the note doesn't exist replace row with one that has been concatinated with the note/value\n                    if (steps.current[col].indexOf(notes[row]) == -1) {\n                        steps.current[col] = steps.current[col].concat([notes[row]]);\n                        // console.log(steps.current);\n                        // console.log('indexof -1')\n                        return;\n                    }\n                })\n            }\n            if (notes[j].match(pattern)) col_cell.classList.add('sharp-color');\n            col_container.appendChild(col_cell);\n\n        }\n\n\n        piano_roll_container.appendChild(col_container);\n\n        // console.log(col_container);\n\n    }\n\n    const incrementColumn = () =>{\n        props.setPlay(false);\n\n        var t = document.querySelector('.piano-roll-container--scrollable');\n\n        var all_col = document.querySelectorAll('.piano-roll-col-container');\n        steps.current = steps.current.concat([[]]);\n        numOfCol.current += 1;\n        addColumnElement(numOfCol.current);\n\n        console.log('added new column, so the current amount of columns are:', numOfCol.current)\n    }\n\n    const clearColLabel = () => {\n        const purple_col = document.querySelector(\".purple\");\n        try {\n            purple_col.classList.remove('purple');\n        }\n        catch\n        {\n            return;\n        }\n\n    }\n\n\n\n    useEffect(() => {\n        const col_label = document.querySelectorAll('.piano-roll-col-label');\n        col_label.forEach((e) => {\n            if (e.classList.contains('purple')) console.log('purple');\n        })\n\n        if (props.play) {\n\n            col_label[(previousStepIndex.current + 1) % (numOfCol.current - 1)].classList.remove('purple');\n            // console.log( `prev plus 1 element = ${(previousStepIndex.current+1)%(numOfCol-1)}, previousIndex: ${previousStepIndex.current}, currentIndex: ${currentStepIndex}`);\n            col_label[previousStepIndex.current].classList.remove('purple');\n            col_label[currentStepIndex].classList.add('purple');\n        }\n    }, [currentStepIndex])\n\n    const initializePianoRoll = () => {\n        let i = 1;\n        for (; i <= 8; i++) {\n            addColumnElement(i);\n            numOfCol.current += 1;\n        }\n\n        const row_label = document.querySelector('.piano-roll-row-container');\n        const pattern = /\\w#\\d/g;\n        notes.forEach((e) => {\n            var di = document.createElement('div');\n            var span = document.createElement('span');\n\n            span.innerText = e;\n            di.appendChild(span);\n            di.classList.add('piano-roll-row-label');\n            if (e.match(pattern)) di.classList.add('sharp-color');\n            row_label.appendChild(di);\n\n            if (e == \"C4\") di.scrollIntoView();\n        })\n    }\n    useEffect(() => {\n        const T = document.querySelector('.tes');\n\n        initializePianoRoll();\n\n        const test = document.querySelectorAll('.piano-roll-cell'); // aggregates all elements with that className\n        // console.log(test);\n        // for each element\n        // 1 - toggle class on click\n        // 2 - print the row and col of element\n        // 3 - add to matrix (using useRef at the moment. I will try to change that later) if element value is not in matrix\n        // 4 - remove element accordingly if value exists in same row of matrix\n        test.forEach((e, index, array) => {\n            numOfCells.current = index;\n            e.addEventListener('click', () => {\n                props.setPlay(false);\n                clearColLabel();\n                setCurrentStepIndex(-1)\n                // console.log(index%8);\n                let col = 0;\n                let row;\n                for (row = index; row > notes.length - 1;) {\n                    row -= notes.length;\n                    col++;\n                }\n                localStorage.setItem('CURRENT_STEPS', JSON.stringify(steps.current));\n                // console.log(`row: ${row}, col: ${col}, index%8 = ${index%8}`)\n                e.classList.toggle('blue');\n                // T.innerHTML = `col: ${col}, row: ${row}, index%8 = ${index%8}`;\n                // console.log(`row: ${row}, col: ${col}, index%8 = ${index%8}`)\n                // setSteps(steps[col] = steps[col].concat([notes[row]]));\n                // console.log(steps.current[col].indexOf(notes[row]));\n                // if the note exists in appropriate row replace that row with an array without element\n                // console.log(\"clicked\", steps.current[col].indexOf(notes[row]));\n                if (steps.current[col].indexOf(notes[row]) != -1) {\n                    steps.current[col] = steps.current[col].filter((a) => {\n                        return a != notes[row];\n                    });\n                    // console.log(steps.current);\n                    // console.log('indexof 0');\n                    return;\n                }\n                // if the note doesn't exist replace row with one that has been concatinated with the note/value\n                if (steps.current[col].indexOf(notes[row]) == -1) {\n                    steps.current[col] = steps.current[col].concat([notes[row]]);\n                    // console.log(steps.current);\n                    // console.log('indexof -1')\n                    return;\n                }\n\n            })\n            // console.log('done\\n');\n\n\n        })\n    }, []);\n\n\n\n    return (\n        <>\n            <div className=\"piano-roll-landing-container\">\n                <p className=\"tes\"></p>\n                <div className=\"clickables\">\n                    <button class=\"btn\" onClick={handleClear}>Clear</button>\n                    <button class=\"btn\" onClick={handleRandom}>Generate</button>\n                    {/* <button onClick={decrementColumn}> \n                            remove column\n                        </button>\n                        <button onClick={incrementColumn}> \n                            add column\n                        </button> */}\n                    {/* <button onClick={() => setIsPlaying(!isPlaying)}>\n                            {!isPlaying ? 'Play' : 'Stop'}\n                        </button> */}\n                </div>\n                {/* Reactronica Components */}\n                <Song isPlaying={props.play} bpm={props.bpm} >\n                    <Track\n                        steps={steps.current}\n                        // Callback triggers on every step\n                        onStepPlay={(stepNotes, index) => {\n\n                            setCurrentStepIndex(index);\n                            console.log(`prev.current:  ${previousStepIndex.current}, track index: ${index}, calc: ${(index + (numOfCol.current - 2)) % (numOfCol.current - 1)} numOfCol: ${numOfCol.current}`)\n                            previousStepIndex.current = (index + (numOfCol.current - 1)) % (numOfCol.current);\n                            console.log(`num of col: ${numOfCol.current}`)\n                        }}\n                        volume={props.vol}\n                        pan={props.pan}\n                    >\n                        <Instrument type=\"polySynth\" />\n                    </Track>\n                </Song>\n\n                <section className=\"piano-roll-container\">\n                    <section className=\"piano-roll-container--scrollable\">\n                        <div className=\"piano-roll-row-container\">\n                            <div className=\"piano-roll-row-label\" >\n                                <span></span>\n                            </div>\n\n\n                        </div>\n                    </section>\n                </section>\n\n            </div>\n            <div>\n\n            </div>\n        </>\n    );\n}"]},"metadata":{},"sourceType":"module"}