{"ast":null,"code":"var _jsxFileName = \"/Users/nigel/Documents/GitHub/test/src/components/navSide.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './navSide.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst getVol = vol => {\n  return parseInt(vol) + 100;\n};\n\nconst getPan = pan => {\n  if (pan < 0) {\n    return \"L\" + String(Math.abs(pan));\n  } else if (pan > 0) {\n    return \"R\" + String(pan);\n  } else {\n    return String(pan);\n  }\n};\n\nconst NavSide = props => {\n  _s();\n\n  const [inValue, setInValue] = useState(-50);\n  const [panValue, setPanValue] = useState(0); // if (swidge)\n  // {\n  //     props.handleVol(-50);\n  //     props.handlePan(0);\n  //     swidge = false;    \n  // }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"NavSide\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sliderContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"range\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"Vol\",\n            children: [\"Volume: \", getVol(String(inValue))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"slide\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"field\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"value left\",\n                children: \"0\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"slider\",\n                type: \"range\",\n                min: \"-100\",\n                max: \"0\",\n                onChange: e => {\n                  props.handleVol(e.target.value);\n                  setInValue(e.target.value);\n                },\n                value: inValue,\n                steps: \"1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"value right\",\n                children: \"100\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sliderContainer two\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"range\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"Vol\",\n            children: [\"Pan: \", getPan(panValue)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"slide\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"field\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"value left\",\n                children: \"0\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"slider\",\n                type: \"range\",\n                min: \"-100\",\n                max: \"100\",\n                onChange: e => {\n                  props.handlePan(e.target.value);\n                  setPanValue(e.target.value);\n                },\n                value: panValue,\n                steps: \"1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"value right\",\n                children: \"100\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(NavSide, \"shwoew2lieAE5eJI0hp0Aoqcw00=\");\n\n_c = NavSide;\nexport default NavSide;\n/*\n<div className = 'sliderContainer'> \n    <RangeStepInput\n    min={0} max={80}\n    defaultValue={props.vol} \n    step={1}\n    onChange={e => props.handleVol(e.target.value)}\n    />\n</div>\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"NavSide\");","map":{"version":3,"sources":["/Users/nigel/Documents/GitHub/test/src/components/navSide.js"],"names":["React","useState","getVol","vol","parseInt","getPan","pan","String","Math","abs","NavSide","props","inValue","setInValue","panValue","setPanValue","e","handleVol","target","value","handlePan"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport './navSide.css';\n\n\n\nconst getVol = (vol) =>\n{\n    return parseInt(vol) + 100;\n}\n\nconst getPan = (pan) =>\n{\n    if (pan < 0)\n    {\n        return \"L\" + String(Math.abs(pan));\n    }\n    else if (pan > 0)\n    {\n        return \"R\" + String(pan);\n    }\n        \n    else\n    {\n        return String(pan);\n    }\n}\n\nconst NavSide = (props) => {\n    const [inValue, setInValue] = useState(-50);\n    const [panValue, setPanValue] = useState(0);\n\n    // if (swidge)\n    // {\n    //     props.handleVol(-50);\n    //     props.handlePan(0);\n    //     swidge = false;    \n    // }\n    \n\n    return (\n        <>\n            <div className = 'NavSide'>\n                <div className = 'sliderContainer'> \n                    <div className = 'range'>\n                        <div className =\"Vol\">Volume: {getVol(String(inValue))}</div>\n                        <div className='slide'>\n                            <div className = 'field'>\n                                <div className= 'value left'>0</div>\n                                <input className='slider' \n                                    type=\"range\" \n                                    min ='-100'max='0' \n                                    onChange={(e => {\n                                        props.handleVol(e.target.value);\n                                        setInValue(e.target.value);\n                                    })}\n                                    value={inValue}\n                                    steps ='1'>\n                                </input>\n                                <div className= 'value right'>100</div>\n                            </div>\n                        </div>\n                    </div>\n                </div> \n                <div className = 'sliderContainer two'> \n                    <div className = 'range'>\n                        <div className =\"Vol\">Pan: {getPan(panValue)}</div>\n                        <div className='slide'>\n                            <div className = 'field'>\n                                <div className= 'value left'>0</div>\n                                <input className='slider' \n                                    type=\"range\" \n                                    min ='-100'max='100' \n                                    onChange={(e => {\n                                        props.handlePan(e.target.value);\n                                        setPanValue(e.target.value);\n                                    })}\n                                    value={panValue}\n                                    steps ='1'>\n                                </input>\n                                <div className= 'value right'>100</div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div> \n        </>\n    )\n}\n\nexport default NavSide;\n\n\n\n/*\n<div className = 'sliderContainer'> \n    <RangeStepInput\n    min={0} max={80}\n    defaultValue={props.vol} \n    step={1}\n    onChange={e => props.handleVol(e.target.value)}\n    />\n</div>\n*/"]},"metadata":{},"sourceType":"module"}